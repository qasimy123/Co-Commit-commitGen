{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,16 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.7 (2023-01-04)\n+\n+### Other changes\n+\n+**fix(#143) : allow space before \":\" in commit message**\n+\n+\n+[09d15](https://github.com/tomasbjerre/git-changelog-lib/commit/09d150c76d0369a) THAVEAU Alexis *2023-01-04 10:59:51*\n+\n+\n ## 1.168.6 (2022-12-12)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.7 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Dec 12 17:12:57 CET 2022\n-version=1.168.6\n+#Wed Jan 04 16:59:49 CET 2023\n description='Library for parsing report files from static code analysis'\n+version=1.168.7\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.7 [GRADLE SCRIPT]"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -21,9 +21,9 @@ dependencies {\n  implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'\n  implementation 'org.gitlab:java-gitlab-api:4.1.1'\n \n- testImplementation 'org.slf4j:slf4j-simple:2.0.5'\n+ testImplementation 'org.slf4j:slf4j-simple:2.0.6'\n  testImplementation 'junit:junit:4.13.2'\n  testImplementation 'org.assertj:assertj-core:3.23.1'\n  testImplementation 'com.approvaltests:approvaltests:18.5.0'\n- testImplementation 'org.mockito:mockito-core:4.9.0'\n+ testImplementation 'org.mockito:mockito-core:4.11.0'\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -541,7 +541,9 @@ public class GitRepo implements Closeable {\n         merge);\n   }\n \n-  /** @param pathFilter use when filtering commits */\n+  /**\n+   * @param pathFilter use when filtering commits\n+   */\n   public void setTreeFilter(final String pathFilter) {\n     this.pathFilter = pathFilter == null ? \"\" : pathFilter;\n   }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java\n\n@@ -1,23 +1,22 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n import com.github.jknack.handlebars.Options;\n-import se.bjurr.gitchangelog.api.model.Commit;\n-import se.bjurr.gitchangelog.api.model.Issue;\n-import se.bjurr.gitchangelog.api.model.Tag;\n-import se.bjurr.gitchangelog.internal.model.Transformer;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+import se.bjurr.gitchangelog.api.model.Commit;\n+import se.bjurr.gitchangelog.api.model.Issue;\n+import se.bjurr.gitchangelog.api.model.Tag;\n+import se.bjurr.gitchangelog.internal.model.Transformer;\n \n public class ConventionalCommitParser {\n   private static final Pattern CONVENTIONAL_PATTERN =\n-          Pattern.compile(\"^(\\\\w+)(\\\\(([\\\\w\\\\-\\\\.:]+)\\\\)?)?(\\\\!?)[\\\\s?]*:(.+)\");\n+      Pattern.compile(\"^(\\\\w+)(\\\\(([\\\\w\\\\-\\\\.:]+)\\\\)?)?(\\\\!?)[\\\\s?]*:(.+)\");\n   private static final Pattern FOOTER_PATTERN =\n-          Pattern.compile(\"^(BREAKING[ -]CHANGE|[^ ]+)(((: )|( #))(.+))\");\n+      Pattern.compile(\"^(BREAKING[ -]CHANGE|[^ ]+)(((: )|( #))(.+))\");\n \n   public static String getDate(final String tagTime) {\n     if (tagTime == null || !tagTime.contains(\" \")) {\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParserTest.java | file path B: src/test/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParserTest.java\n\n@@ -1,9 +1,9 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n-import org.junit.Test;\n-\n import static org.assertj.core.api.Assertions.assertThat;\n \n+import org.junit.Test;\n+\n public class ConventionalCommitParserTest {\n \n   @Test\n@@ -12,23 +12,25 @@ public class ConventionalCommitParserTest {\n     assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #123)\")).isEqualTo(\"a\");\n     assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs J-1)\")).isEqualTo(\"a\");\n     assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs JE-12)\")).isEqualTo(\"a\");\n-    assertThat(ConventionalCommitParser.commitDescription(\"feat(123): add polish language\")).isEqualTo(\"add polish language\");\n-    assertThat(ConventionalCommitParser.commitDescription(\"feat(123) : add polish language\")).isEqualTo(\"add polish language\");\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat(123): add polish language\"))\n+        .isEqualTo(\"add polish language\");\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat(123) : add polish language\"))\n+        .isEqualTo(\"add polish language\");\n   }\n \n   @Test\n   public void testThatScopeCanBeParsed() {\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(lang): add polish language\"))\n-            .containsOnly(\"lang\");\n+        .containsOnly(\"lang\");\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(la-ng): add polish language\"))\n-            .containsOnly(\"la-ng\");\n+        .containsOnly(\"la-ng\");\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(l): add polish language\"))\n-            .containsOnly(\"l\");\n+        .containsOnly(\"l\");\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(123): add polish language\"))\n-            .containsOnly(\"123\");\n+        .containsOnly(\"123\");\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(org.test): add polish language\"))\n-            .containsOnly(\"org.test\");\n+        .containsOnly(\"org.test\");\n     assertThat(ConventionalCommitParser.commitScopes(\"feat(123) : add polish language\"))\n-            .containsOnly(\"123\");\n+        .containsOnly(\"123\");\n   }\n }\n\n\n###\n\n", "completion": "chore: formatting"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.6 (2022-12-12)\n+\n+### Bug Fixes\n+\n+-  making semantic version match not greedy ([14d0f](https://github.com/tomasbjerre/git-changelog-lib/commit/14d0f0860f67f23) Tomas Bjerre)  [#142](https://github.com/tomasbjerre/git-changelog-lib/issues/142)  \n+\n ## 1.168.5 (2022-12-03)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "docs: changelog"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sat Dec 03 09:36:17 CET 2022\n-version=1.168.5\n+#Mon Dec 12 17:12:57 CET 2022\n+version=1.168.6\n description='Library for parsing report files from static code analysis'\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -10,10 +10,8 @@ import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n@@ -183,8 +181,8 @@ public class SemanticVersioningTest {\n \n   @Test\n   public void testLongPatchMatches() throws Throwable {\n-\t    this.tags.add(\"1.2.33333\");\n-\t    this.tags.add(\"1.2.3\");\n+    this.tags.add(\"1.2.33333\");\n+    this.tags.add(\"1.2.3\");\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion.toString()) //\n@@ -193,8 +191,8 @@ public class SemanticVersioningTest {\n \n   @Test\n   public void testLongPatchMatches_reverse_order() throws Throwable {\n-\t    this.tags.add(\"1.2.3\");\n-\t    this.tags.add(\"1.2.33333\");\n+    this.tags.add(\"1.2.3\");\n+    this.tags.add(\"1.2.33333\");\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion.toString()) //\n@@ -203,8 +201,8 @@ public class SemanticVersioningTest {\n \n   @Test\n   public void testLongMinorMatches() throws Throwable {\n-\t    this.tags.add(\"1.22222\");\n-\t    this.tags.add(\"1.2\");\n+    this.tags.add(\"1.22222\");\n+    this.tags.add(\"1.2\");\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion.toString()) //\n@@ -213,14 +211,14 @@ public class SemanticVersioningTest {\n \n   @Test\n   public void testLongMinorMatches_reverse_order() throws Throwable {\n-\t    this.tags.add(\"1.2\");\n-\t    this.tags.add(\"1.22222\");\n+    this.tags.add(\"1.2\");\n+    this.tags.add(\"1.22222\");\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion.toString()) //\n-    .isEqualTo(\"1.22222.0\");\n+        .isEqualTo(\"1.22222.0\");\n     assertThat(highestVersion.findTag().orElse(\"\")) //\n-    .isEqualTo(\"1.22222\");\n+        .isEqualTo(\"1.22222\");\n   }\n \n   @Test\n\n\n###\n\n", "completion": "chore(release): 1.168.6 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -89,7 +89,7 @@ public class SemanticVersioning {\n \n   public static Optional<SemanticVersion> findSemanticVersion(final String tag) {\n     final Matcher semanticVersionMatcher =\n-        Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.?[0-9]+?\").matcher(tag);\n+        Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.?[0-9]*\").matcher(tag);\n     if (!semanticVersionMatcher.find()) {\n       return Optional.empty();\n     }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -10,8 +10,10 @@ import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n+\n import org.junit.Before;\n import org.junit.Test;\n+\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n@@ -179,6 +181,48 @@ public class SemanticVersioningTest {\n     assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(PATCH);\n   }\n \n+  @Test\n+  public void testLongPatchMatches() throws Throwable {\n+\t    this.tags.add(\"1.2.33333\");\n+\t    this.tags.add(\"1.2.3\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion.toString()) //\n+        .isEqualTo(\"1.2.33333\");\n+  }\n+\n+  @Test\n+  public void testLongPatchMatches_reverse_order() throws Throwable {\n+\t    this.tags.add(\"1.2.3\");\n+\t    this.tags.add(\"1.2.33333\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion.toString()) //\n+        .isEqualTo(\"1.2.33333\");\n+  }\n+\n+  @Test\n+  public void testLongMinorMatches() throws Throwable {\n+\t    this.tags.add(\"1.22222\");\n+\t    this.tags.add(\"1.2\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion.toString()) //\n+        .isEqualTo(\"1.22222.0\");\n+  }\n+\n+  @Test\n+  public void testLongMinorMatches_reverse_order() throws Throwable {\n+\t    this.tags.add(\"1.2\");\n+\t    this.tags.add(\"1.22222\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion.toString()) //\n+    .isEqualTo(\"1.22222.0\");\n+    assertThat(highestVersion.findTag().orElse(\"\")) //\n+    .isEqualTo(\"1.22222\");\n+  }\n+\n   @Test\n   public void testTagCleanup() throws Throwable {\n     assertThat(this.getTagNameFrom(\"whatever1.2.3.4\")).isEqualTo(\"1.2.3\");\n\n\n###\n\n", "completion": "fix: making semantic version match not greedy (refs #142)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.5 (2022-12-03)\n+\n+### Bug Fixes\n+\n+-  let semantic tag have priority if several tags on same commit ([13a82](https://github.com/tomasbjerre/git-changelog-lib/commit/13a8220c2493c8b) Tomas Bjerre)  \n+\n ## 1.168.4 (2022-10-24)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.5 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Oct 24 19:40:10 CEST 2022\n-version=1.168.4\n+#Sat Dec 03 09:36:17 CET 2022\n+version=1.168.5\n description='Library for parsing report files from static code analysis'\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.5 [GRADLE SCRIPT]"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -21,9 +21,9 @@ dependencies {\n  implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'\n  implementation 'org.gitlab:java-gitlab-api:4.1.1'\n \n- testImplementation 'org.slf4j:slf4j-simple:2.0.3'\n+ testImplementation 'org.slf4j:slf4j-simple:2.0.5'\n  testImplementation 'junit:junit:4.13.2'\n  testImplementation 'org.assertj:assertj-core:3.23.1'\n  testImplementation 'com.approvaltests:approvaltests:18.5.0'\n- testImplementation 'org.mockito:mockito-core:4.8.1'\n+ testImplementation 'org.mockito:mockito-core:4.9.0'\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -36,6 +36,7 @@ import se.bjurr.gitchangelog.api.GitChangelogApiConstants;\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n import se.bjurr.gitchangelog.internal.git.model.GitCommit;\n import se.bjurr.gitchangelog.internal.git.model.GitTag;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n \n public class GitRepo implements Closeable {\n   private static final Logger LOG = LoggerFactory.getLogger(GitRepo.class);\n@@ -301,7 +302,20 @@ public class GitRepo implements Closeable {\n           continue;\n         }\n       }\n-      tagPerCommit.put(this.getPeeled(tag).getName(), tag);\n+      final String commitId = this.getPeeled(tag).getName();\n+      if (tagPerCommit.containsKey(commitId)) {\n+        /**\n+         * Only overwrite tag, if the new tag is semantic version. Let semantic tags have priority.\n+         */\n+        final boolean newFoundTagSemantic = SemanticVersioning.isSemantic(tag.getName());\n+        final boolean existingTagNotSemantic =\n+            !SemanticVersioning.isSemantic(tagPerCommit.get(commitId).getName());\n+        if (newFoundTagSemantic || existingTagNotSemantic) {\n+          tagPerCommit.put(commitId, tag);\n+        }\n+      } else {\n+        tagPerCommit.put(commitId, tag);\n+      }\n     }\n     return tagPerCommit;\n   }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -1,6 +1,7 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n import java.util.List;\n+import java.util.Optional;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -63,20 +64,9 @@ public class SemanticVersioning {\n   public static SemanticVersion getHighestVersion(final List<String> tags) {\n     SemanticVersion highest = new SemanticVersion(0, 0, 0);\n     for (final String tag : tags) {\n-      final Matcher semanticVersionMatcher =\n-          Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.?[0-9]+?\").matcher(tag);\n-      if (semanticVersionMatcher.find()) {\n-        final String[] dotParts = semanticVersionMatcher.group().split(\"\\\\.\");\n-        Integer patch = 0;\n-        if (dotParts.length > 2) {\n-          patch = new Integer(dotParts[2]);\n-        }\n-        final SemanticVersion candidate =\n-            new SemanticVersion(\n-                new Integer(dotParts[0]), //\n-                new Integer(dotParts[1]), //\n-                patch);\n-        candidate.setTag(tag);\n+      final Optional<SemanticVersion> candidateOpt = findSemanticVersion(tag);\n+      if (candidateOpt.isPresent()) {\n+        final SemanticVersion candidate = candidateOpt.get();\n         if (candidate.getMajor() > highest.getMajor()) {\n           highest = candidate;\n           continue;\n@@ -97,6 +87,31 @@ public class SemanticVersioning {\n     return highest;\n   }\n \n+  public static Optional<SemanticVersion> findSemanticVersion(final String tag) {\n+    final Matcher semanticVersionMatcher =\n+        Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.?[0-9]+?\").matcher(tag);\n+    if (!semanticVersionMatcher.find()) {\n+      return Optional.empty();\n+    }\n+    final String[] dotParts = semanticVersionMatcher.group().split(\"\\\\.\");\n+    Integer patch = 0;\n+    if (dotParts.length > 2) {\n+      patch = new Integer(dotParts[2]);\n+    }\n+    final SemanticVersion candidate =\n+        new SemanticVersion(\n+            new Integer(dotParts[0]), //\n+            new Integer(dotParts[1]), //\n+            patch);\n+    candidate.setTag(tag);\n+    return Optional.of(candidate);\n+  }\n+\n+  public static boolean isSemantic(final String tag) {\n+    final Optional<SemanticVersion> foundSemanticOpt = SemanticVersioning.findSemanticVersion(tag);\n+    return foundSemanticOpt.isPresent();\n+  }\n+\n   private VERSION_STEP getVersionStep() {\n     final boolean patchVersionPatternGiven = this.patchPattern != null;\n     VERSION_STEP versionStep = patchVersionPatternGiven ? VERSION_STEP.NONE : VERSION_STEP.PATCH;\n\n\n###\n\n", "completion": "fix: let semantic tag have priority if several tags on same commit"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.4 (2022-10-24)\n+\n+### Bug Fixes\n+\n+-  stepping dependencies to fix CVE-2022-42889 ([c4c7e](https://github.com/tomasbjerre/git-changelog-lib/commit/c4c7eb23237c703) Tomas Bjerre)  \n+\n ## 1.168.3 (2022-09-10)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sat Sep 10 08:46:02 CEST 2022\n-version=1.168.3\n+#Mon Oct 24 19:40:10 CEST 2022\n+version=1.168.4\n description='Library for parsing report files from static code analysis'\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -13,7 +13,7 @@ apply from: project.buildscript.classLoader.getResource('main.gradle').toURI()\n \n \n dependencies {\n- api 'com.github.jknack:handlebars:4.3.0'\n+ api 'com.github.jknack:handlebars:4.3.1'\n \n  implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n  implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n@@ -21,11 +21,9 @@ dependencies {\n  implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'\n  implementation 'org.gitlab:java-gitlab-api:4.1.1'\n \n- testImplementation 'org.slf4j:slf4j-simple:2.0.0-beta1'\n+ testImplementation 'org.slf4j:slf4j-simple:2.0.3'\n  testImplementation 'junit:junit:4.13.2'\n- testImplementation 'org.slf4j:slf4j-simple:1.7.13'\n  testImplementation 'org.assertj:assertj-core:3.23.1'\n- testImplementation 'org.mockito:mockito-all:2.0.2-beta'\n- testImplementation 'com.approvaltests:approvaltests:17.2.1'\n- testImplementation 'org.mockito:mockito-core:4.6.1'\n+ testImplementation 'com.approvaltests:approvaltests:18.5.0'\n+ testImplementation 'org.mockito:mockito-core:4.8.1'\n }\n\n\n###\n\n", "completion": "fix: stepping dependencies to fix CVE-2022-42889"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.3 (2022-09-10)\n+\n+### Bug Fixes\n+\n+-  detecting missing patch-version as 0 ([c5cc6](https://github.com/tomasbjerre/git-changelog-lib/commit/c5cc6bb241c9b6e) Tomas Bjerre)  \n+\n ## 1.168.2 (2022-08-07)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Aug 07 17:49:43 CEST 2022\n+#Sat Sep 10 08:46:02 CEST 2022\n+version=1.168.3\n description='Library for parsing report files from static code analysis'\n-version=1.168.2\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -527,9 +527,7 @@ public class GitRepo implements Closeable {\n         merge);\n   }\n \n-  /**\n-   * @param pathFilter use when filtering commits\n-   */\n+  /** @param pathFilter use when filtering commits */\n   public void setTreeFilter(final String pathFilter) {\n     this.pathFilter = pathFilter == null ? \"\" : pathFilter;\n   }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -64,14 +64,18 @@ public class SemanticVersioning {\n     SemanticVersion highest = new SemanticVersion(0, 0, 0);\n     for (final String tag : tags) {\n       final Matcher semanticVersionMatcher =\n-          Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\").matcher(tag);\n+          Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.?[0-9]+?\").matcher(tag);\n       if (semanticVersionMatcher.find()) {\n         final String[] dotParts = semanticVersionMatcher.group().split(\"\\\\.\");\n+        Integer patch = 0;\n+        if (dotParts.length > 2) {\n+          patch = new Integer(dotParts[2]);\n+        }\n         final SemanticVersion candidate =\n             new SemanticVersion(\n                 new Integer(dotParts[0]), //\n                 new Integer(dotParts[1]), //\n-                new Integer(dotParts[2]));\n+                patch);\n         candidate.setTag(tag);\n         if (candidate.getMajor() > highest.getMajor()) {\n           highest = candidate;\n\n\n###\n\n", "completion": "fix: detecting missing patch-version as 0"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.2 (2022-08-07)\n+\n+### Bug Fixes\n+\n+-  stepping dependencies ([54272](https://github.com/tomasbjerre/git-changelog-lib/commit/54272e9ded83d9d) Tomas Bjerre)  \n+\n ## 1.168.1 (2022-08-02)\n \n ### Bug Fixes\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Aug 02 15:43:47 CEST 2022\n+#Sun Aug 07 17:49:43 CEST 2022\n description='Library for parsing report files from static code analysis'\n-version=1.168.1\n+version=1.168.2\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.java\n\n@@ -7,11 +7,9 @@ import static se.bjurr.gitchangelog.internal.integrations.rest.RestClient.mock;\n \n import java.nio.file.Files;\n import java.nio.file.Paths;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubMockInterceptor;\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubServiceFactory;\n import se.bjurr.gitchangelog.internal.integrations.jira.JiraClientFactory;\n@@ -148,7 +146,7 @@ public class TemplatesTest {\n     ApprovalsWrapper.verify(given);\n   }\n \n-  //@Test\n+  // @Test\n   // Enable when this is fixed:\n   // https://github.com/jknack/handlebars.java/issues/951\n   public void testIssueType() throws Exception {\n\n\n###\n\n", "completion": "chore(release): 1.168.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -17,15 +17,15 @@ dependencies {\n \n  implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n  implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n- implementation 'com.jayway.jsonpath:json-path:2.1.0'\n- implementation 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'\n- implementation 'org.gitlab:java-gitlab-api:4.1.0'\n+ implementation 'com.jayway.jsonpath:json-path:2.7.0'\n+ implementation 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'\n+ implementation 'org.gitlab:java-gitlab-api:4.1.1'\n \n- testImplementation 'org.slf4j:slf4j-simple:1.8.0-beta4'\n- testImplementation 'junit:junit:4.12'\n+ testImplementation 'org.slf4j:slf4j-simple:2.0.0-beta1'\n+ testImplementation 'junit:junit:4.13.2'\n  testImplementation 'org.slf4j:slf4j-simple:1.7.13'\n- testImplementation 'org.assertj:assertj-core:2.3.0'\n- testImplementation 'org.mockito:mockito-all:1.8.5'\n- testImplementation 'com.approvaltests:approvaltests:15.0.0'\n- testImplementation 'org.mockito:mockito-core:3.10.0'\n+ testImplementation 'org.assertj:assertj-core:3.23.1'\n+ testImplementation 'org.mockito:mockito-all:2.0.2-beta'\n+ testImplementation 'com.approvaltests:approvaltests:17.2.1'\n+ testImplementation 'org.mockito:mockito-core:4.6.1'\n }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.java\n\n@@ -7,9 +7,11 @@ import static se.bjurr.gitchangelog.internal.integrations.rest.RestClient.mock;\n \n import java.nio.file.Files;\n import java.nio.file.Paths;\n+\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n+\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubMockInterceptor;\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubServiceFactory;\n import se.bjurr.gitchangelog.internal.integrations.jira.JiraClientFactory;\n@@ -146,7 +148,9 @@ public class TemplatesTest {\n     ApprovalsWrapper.verify(given);\n   }\n \n-  @Test\n+  //@Test\n+  // Enable when this is fixed:\n+  // https://github.com/jknack/handlebars.java/issues/951\n   public void testIssueType() throws Exception {\n     final GitChangelogApi given =\n         this.baseBuilder.withTemplatePath(\"templatetest/\" + \"testIssueType\" + \".mustache\");\n\n\n###\n\n", "completion": "fix: stepping dependencies"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,12 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.168.1 (2022-08-02)\n+\n+### Bug Fixes\n+\n+-  avoiding encoding change in prependToFile ([418ca](https://github.com/tomasbjerre/git-changelog-lib/commit/418ca7db02ed18b) Tomas Bjerre)  \n+\n ## 1.168.0 (2022-08-01)\n \n ### Features\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.168.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Aug 01 16:07:47 CEST 2022\n+#Tue Aug 02 15:43:47 CEST 2022\n description='Library for parsing report files from static code analysis'\n-version=1.168.0\n+version=1.168.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -14,6 +14,7 @@ import com.github.jknack.handlebars.Helper;\n import com.github.jknack.handlebars.Template;\n import com.github.jknack.handlebars.io.FileTemplateLoader;\n import java.io.File;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.Writer;\n@@ -165,12 +166,15 @@ public class GitChangelogApi {\n       this.toFile(file);\n       return;\n     }\n-    final String prepend = this.render();\n-    final String changelogContent = new String(Files.readAllBytes(file.toPath()));\n-    Files.write(\n-        file.toPath(), (prepend + \"\\n\" + changelogContent).getBytes(this.settings.getEncoding()));\n-  }\n \n+    final byte[] bytesToPrepend = this.render().getBytes(this.settings.getEncoding());\n+    final byte[] originalBytes = Files.readAllBytes(file.toPath());\n+\n+    final FileOutputStream outputStream = new FileOutputStream(file);\n+    outputStream.write(bytesToPrepend);\n+    outputStream.write(originalBytes);\n+    outputStream.close();\n+  }\n   /**\n    * Get next semantic version. This requires version-pattern and major/minor/patch patterns to have\n    * been configured.\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -367,7 +367,11 @@ public class GitChangelogApiTest {\n \n     assertThat(renderedContent)\n         .as(new String(renderedContent, charsetToTest))\n-        .containsExactly(new byte[] {-27, -28, -10, 10, 63, 63, 63});\n+        .containsExactly(\n+            new byte[] { //\n+              -27, -28, -10, //\n+              -27, -28, -10\n+            });\n   }\n \n   @Test\n@@ -383,7 +387,6 @@ public class GitChangelogApiTest {\n               -61, -91, //\n               -61, -92, //\n               -61, -74, //\n-              10, //\n               -61, -91, //\n               -61, -92, //\n               -61, -74 //\n\n\n###\n\n", "completion": "fix: avoiding encoding change in prependToFile"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Aug 01 14:58:34 CEST 2022\n+#Mon Aug 01 16:07:47 CEST 2022\n description='Library for parsing report files from static code analysis'\n-version=1.167.0\n+version=1.168.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.168.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: .gitignore | file path B: .gitignore\n\n@@ -17,3 +17,4 @@ classes\n \n /.nb-gradle/\n *.received.txt\n+tmptestfile-*\n\\ No newline at end of file\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -1,6 +1,5 @@\n package se.bjurr.gitchangelog.api;\n \n-import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Optional.empty;\n import static java.util.Optional.of;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.REF_HEAD;\n@@ -19,6 +18,7 @@ import java.io.IOException;\n import java.io.StringWriter;\n import java.io.Writer;\n import java.net.URL;\n+import java.nio.charset.Charset;\n import java.nio.file.Files;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n@@ -132,7 +132,7 @@ public class GitChangelogApi {\n       return this.templateContent;\n     }\n     final String resourceName = this.settings.getTemplatePath();\n-    return ResourceLoader.getResourceOrFile(resourceName);\n+    return ResourceLoader.getResourceOrFile(resourceName, this.settings.getEncoding());\n   }\n \n   /** Get the changelog. */\n@@ -156,7 +156,7 @@ public class GitChangelogApi {\n         throw new RuntimeException(\"Folder \" + parentFile.getAbsolutePath() + \" cannot be created\");\n       }\n     }\n-    Files.write(file.toPath(), this.render().getBytes(UTF_8));\n+    Files.write(file.toPath(), this.render().getBytes(this.settings.getEncoding()));\n   }\n \n   /** Prepend the changelog to the given file. */\n@@ -167,7 +167,8 @@ public class GitChangelogApi {\n     }\n     final String prepend = this.render();\n     final String changelogContent = new String(Files.readAllBytes(file.toPath()));\n-    Files.write(file.toPath(), (prepend + \"\\n\" + changelogContent).getBytes(UTF_8));\n+    Files.write(\n+        file.toPath(), (prepend + \"\\n\" + changelogContent).getBytes(this.settings.getEncoding()));\n   }\n \n   /**\n@@ -702,4 +703,9 @@ public class GitChangelogApi {\n     this.settings.setRedmineEnabled(b);\n     return this;\n   }\n+\n+  public GitChangelogApi withEncoding(final Charset encoding) {\n+    this.settings.setEncoding(encoding);\n+    return this;\n+  }\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java\n\n@@ -21,6 +21,8 @@ import static se.bjurr.gitchangelog.internal.util.Preconditions.emptyToNull;\n import com.google.gson.Gson;\n import java.io.Serializable;\n import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.text.SimpleDateFormat;\n@@ -240,6 +242,8 @@ public class Settings implements Serializable {\n \n   private String subDirFilter;\n \n+  private String encoding = StandardCharsets.UTF_8.name();\n+\n   public Settings() {}\n \n   public void setCustomIssues(final List<SettingsIssue> customIssues) {\n@@ -675,4 +679,12 @@ public class Settings implements Serializable {\n   public boolean isUseIntegrations() {\n     return this.useIntegrations;\n   }\n+\n+  public void setEncoding(final Charset encoding) {\n+    this.encoding = encoding.name();\n+  }\n+\n+  public Charset getEncoding() {\n+    return Charset.forName(this.encoding);\n+  }\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java\n\n@@ -5,7 +5,7 @@ import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n+import java.nio.charset.Charset;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -14,12 +14,12 @@ import java.util.stream.Collectors;\n public final class ResourceLoader {\n   private ResourceLoader() {}\n \n-  public static String getResourceOrFile(final String resourceName) {\n+  public static String getResourceOrFile(final String resourceName, final Charset encoding) {\n     String templateString = null;\n     try {\n       final Path templatePath = Paths.get(resourceName);\n       if (templatePath.toFile().exists()) {\n-        templateString = new String(Files.readAllBytes(templatePath), StandardCharsets.UTF_8);\n+        templateString = new String(Files.readAllBytes(templatePath), encoding);\n       } else {\n         InputStream inputStream =\n             getResourceFromClassLoader(resourceName, ResourceLoader.class.getClassLoader());\n@@ -33,8 +33,7 @@ public final class ResourceLoader {\n           throw new FileNotFoundException(\n               \"Was unable to find file, or resouce, \\\"\" + resourceName + \"\\\"\");\n         }\n-        try (BufferedReader br =\n-            new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n+        try (BufferedReader br = new BufferedReader(new InputStreamReader(inputStream, encoding))) {\n           templateString = br.lines().collect(Collectors.joining(\"\\n\"));\n         }\n       }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -6,7 +6,10 @@ import static se.bjurr.gitchangelog.api.GitChangelogApi.gitChangelogApiBuilder;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.ZERO_COMMIT;\n import static se.bjurr.gitchangelog.internal.integrations.rest.RestClient.mock;\n \n+import java.io.IOException;\n import java.net.URL;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -15,6 +18,7 @@ import java.util.Map;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n+import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubMockInterceptor;\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubServiceFactory;\n import se.bjurr.gitchangelog.internal.integrations.jira.JiraClientFactory;\n@@ -354,4 +358,56 @@ public class GitChangelogApiTest {\n \n     ApprovalsWrapper.verify(given);\n   }\n+\n+  @Test\n+  public void testThatISO88591ChangelogsCanBeUpdated() throws Exception {\n+    final Charset charsetToTest = StandardCharsets.ISO_8859_1;\n+\n+    final byte[] renderedContent = this.renderWithEncoding(charsetToTest);\n+\n+    assertThat(renderedContent)\n+        .as(new String(renderedContent, charsetToTest))\n+        .containsExactly(new byte[] {-27, -28, -10, 10, 63, 63, 63});\n+  }\n+\n+  @Test\n+  public void testThatUTF8ChangelogsCanBeUpdated() throws Exception {\n+    final Charset charsetToTest = StandardCharsets.UTF_8;\n+\n+    final byte[] renderedContent = this.renderWithEncoding(charsetToTest);\n+\n+    assertThat(renderedContent)\n+        .as(new String(renderedContent, charsetToTest))\n+        .containsExactly(\n+            new byte[] { //\n+              -61, -91, //\n+              -61, -92, //\n+              -61, -74, //\n+              10, //\n+              -61, -91, //\n+              -61, -92, //\n+              -61, -74 //\n+            });\n+  }\n+\n+  private byte[] renderWithEncoding(final Charset charsetToTest)\n+      throws IOException, GitChangelogRepositoryException {\n+    final byte[] aaoIso = \"\u00e5\u00e4\u00f6\".getBytes(charsetToTest);\n+    final Path isoFile1 =\n+        Paths.get(\"src/test/resources/tmptestfile-\" + charsetToTest.name() + \"-file-1.txt\");\n+    Files.write(isoFile1, aaoIso);\n+    final Path isoFile2 =\n+        Paths.get(\"src/test/resources/tmptestfile-\" + charsetToTest.name() + \"-file-2.txt\");\n+    Files.write(isoFile2, aaoIso);\n+\n+    gitChangelogApiBuilder()\n+        .withEncoding(charsetToTest)\n+        .withFromCommit(ZERO_COMMIT)\n+        .withToRef(\"1.71\")\n+        .withTemplatePath(isoFile1.toFile().getAbsolutePath())\n+        .prependToFile(isoFile2.toFile());\n+\n+    final byte[] renderedContent = Files.readAllBytes(isoFile2);\n+    return renderedContent;\n+  }\n }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt\n\n@@ -28,7 +28,8 @@ settings:\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n   \"useIntegrations\": false,\n-  \"subDirFilter\": \"src\"\n+  \"subDirFilter\": \"src\",\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt\n\n@@ -70,7 +70,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": true,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredTagsIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredTagsIssuesCommits.approved.txt\n\n@@ -62,7 +62,8 @@ settings:\n   \"gitLabEnabled\": true,\n   \"gitLabIssuePattern\": \"nooo\",\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt\n\n@@ -61,7 +61,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatFirstVersionCanBeGenerated.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatFirstVersionCanBeGenerated.approved.txt\n\n@@ -74,7 +74,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": false,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt\n\n@@ -70,7 +70,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatOnlyGithubIssuesCanBeParsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatOnlyGithubIssuesCanBeParsed.approved.txt\n\n@@ -75,7 +75,8 @@ settings:\n   \"gitLabEnabled\": false,\n   \"gitLabProjectName\": \"tomasbjerre\",\n   \"useIntegrations\": true,\n-  \"subDirFilter\": \"src\"\n+  \"subDirFilter\": \"src\",\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatOnlyJiraIssuesCanBeParsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatOnlyJiraIssuesCanBeParsed.approved.txt\n\n@@ -75,7 +75,8 @@ settings:\n   \"gitLabEnabled\": false,\n   \"gitLabProjectName\": \"tomasbjerre\",\n   \"useIntegrations\": false,\n-  \"subDirFilter\": \"src\"\n+  \"subDirFilter\": \"src\",\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt\n\n@@ -70,7 +70,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt\n\n@@ -29,7 +29,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatSecondVersionCanBeGenerated.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatSecondVersionCanBeGenerated.approved.txt\n\n@@ -74,7 +74,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": false,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt\n\n@@ -28,7 +28,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": false\n+  \"useIntegrations\": false,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt\n\n@@ -68,7 +68,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt\n\n@@ -64,7 +64,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt\n\n@@ -71,7 +71,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt\n\n@@ -62,7 +62,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt\n\n@@ -58,7 +58,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt\n\n@@ -56,7 +56,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -91,7 +91,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt\n\n@@ -94,7 +94,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt\n\n@@ -74,7 +74,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt\n\n@@ -73,7 +73,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt\n\n@@ -68,7 +68,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt\n\n@@ -78,7 +78,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt\n\n@@ -74,7 +74,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt\n\n@@ -61,7 +61,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatPartialsCanBeIncluded.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatPartialsCanBeIncluded.approved.txt\n\n@@ -62,7 +62,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testUrlParts.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testUrlParts.approved.txt\n\n@@ -59,7 +59,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -151,7 +151,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt\n\n@@ -57,7 +57,8 @@ settings:\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabEnabled\": true,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"useIntegrations\": true\n+  \"useIntegrations\": true,\n+  \"encoding\": \"UTF-8\"\n }\n \n ---------------------------------------------\n\n\n###\n\n", "completion": "feat: adding withEncoding config in API"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.167.0 (2022-08-01)\n+\n+\n+\n+### Features\n+\n+-  fewer empty rows in default template ([26f5c](https://github.com/tomasbjerre/git-changelog-lib/commit/26f5c16d716873e) Tomas Bjerre)  \n+\n+\n+\n+\n+\n ## 1.166.1 (2022-05-01)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.167.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun May 01 18:34:37 CEST 2022\n+#Mon Aug 01 14:58:34 CEST 2022\n description='Library for parsing report files from static code analysis'\n-version=1.166.1\n+version=1.167.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.167.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,26 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.166.1 (2022-05-01)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  closing loaded resource ([a5af6](https://github.com/tomasbjerre/git-changelog-lib/commit/a5af640c1d3f47c) Tomas Bjerre)  \n+\n+\n+### Other changes\n+\n+**Add support for `.`(dot) char in scope (#133)**\n+\n+* fix: add support for dot character inside scope (refs #132) \n+\n+[fd44d](https://github.com/tomasbjerre/git-changelog-lib/commit/fd44dd5baaca2a2) Mattia Dal Ben *2022-05-01 16:30:18*\n+\n+\n ## 1.166.0 (2022-04-03)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.166.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Apr 03 12:14:18 CEST 2022\n-version=1.166.0\n+#Sun May 01 18:34:37 CEST 2022\n description='Library for parsing report files from static code analysis'\n+version=1.166.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.166.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -1083,12 +1083,12 @@ context:\n             }\n           ],\n           \"name\": \"GitHub\",\n-          \"title\": \"\",\n-          \"hasTitle\": false,\n+          \"title\": \"Add support for `.`(dot) char in scope\",\n+          \"hasTitle\": true,\n           \"issue\": \"#133\",\n           \"hasIssue\": true,\n-          \"link\": \"\",\n-          \"hasLink\": false,\n+          \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+          \"hasLink\": true,\n           \"type\": \"\",\n           \"hasType\": false,\n           \"hasDescription\": false,\n@@ -1368,12 +1368,12 @@ context:\n                 }\n               ],\n               \"name\": \"GitHub\",\n-              \"title\": \"\",\n-              \"hasTitle\": false,\n+              \"title\": \"Add support for `.`(dot) char in scope\",\n+              \"hasTitle\": true,\n               \"issue\": \"#133\",\n               \"hasIssue\": true,\n-              \"link\": \"\",\n-              \"hasLink\": false,\n+              \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+              \"hasLink\": true,\n               \"type\": \"\",\n               \"hasType\": false,\n               \"hasDescription\": false,\n@@ -2285,12 +2285,12 @@ context:\n         }\n       ],\n       \"name\": \"GitHub\",\n-      \"title\": \"\",\n-      \"hasTitle\": false,\n+      \"title\": \"Add support for `.`(dot) char in scope\",\n+      \"hasTitle\": true,\n       \"issue\": \"#133\",\n       \"hasIssue\": true,\n-      \"link\": \"\",\n-      \"hasLink\": false,\n+      \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+      \"hasLink\": true,\n       \"type\": \"\",\n       \"hasType\": false,\n       \"hasDescription\": false,\n@@ -2670,12 +2670,12 @@ context:\n             }\n           ],\n           \"name\": \"GitHub\",\n-          \"title\": \"\",\n-          \"hasTitle\": false,\n+          \"title\": \"Add support for `.`(dot) char in scope\",\n+          \"hasTitle\": true,\n           \"issue\": \"#133\",\n           \"hasIssue\": true,\n-          \"link\": \"\",\n-          \"hasLink\": false,\n+          \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+          \"hasLink\": true,\n           \"type\": \"\",\n           \"hasType\": false,\n           \"hasDescription\": false,\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt\n\n@@ -486,12 +486,12 @@ context:\n             }\n           ],\n           \"name\": \"GitHub\",\n-          \"title\": \"\",\n-          \"hasTitle\": false,\n+          \"title\": \"Add support for `.`(dot) char in scope\",\n+          \"hasTitle\": true,\n           \"issue\": \"#133\",\n           \"hasIssue\": true,\n-          \"link\": \"\",\n-          \"hasLink\": false,\n+          \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+          \"hasLink\": true,\n           \"type\": \"\",\n           \"hasType\": false,\n           \"hasDescription\": false,\n@@ -771,12 +771,12 @@ context:\n                 }\n               ],\n               \"name\": \"GitHub\",\n-              \"title\": \"\",\n-              \"hasTitle\": false,\n+              \"title\": \"Add support for `.`(dot) char in scope\",\n+              \"hasTitle\": true,\n               \"issue\": \"#133\",\n               \"hasIssue\": true,\n-              \"link\": \"\",\n-              \"hasLink\": false,\n+              \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+              \"hasLink\": true,\n               \"type\": \"\",\n               \"hasType\": false,\n               \"hasDescription\": false,\n@@ -1688,12 +1688,12 @@ context:\n         }\n       ],\n       \"name\": \"GitHub\",\n-      \"title\": \"\",\n-      \"hasTitle\": false,\n+      \"title\": \"Add support for `.`(dot) char in scope\",\n+      \"hasTitle\": true,\n       \"issue\": \"#133\",\n       \"hasIssue\": true,\n-      \"link\": \"\",\n-      \"hasLink\": false,\n+      \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+      \"hasLink\": true,\n       \"type\": \"\",\n       \"hasType\": false,\n       \"hasDescription\": false,\n@@ -2073,12 +2073,12 @@ context:\n             }\n           ],\n           \"name\": \"GitHub\",\n-          \"title\": \"\",\n-          \"hasTitle\": false,\n+          \"title\": \"Add support for `.`(dot) char in scope\",\n+          \"hasTitle\": true,\n           \"issue\": \"#133\",\n           \"hasIssue\": true,\n-          \"link\": \"\",\n-          \"hasLink\": false,\n+          \"link\": \"https://github.com/tomasbjerre/git-changelog-lib/pull/133\",\n+          \"hasLink\": true,\n           \"type\": \"\",\n           \"hasType\": false,\n           \"hasDescription\": false,\n\n\n###\n\n", "completion": "chore: updating approvals files (refs #132)"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -527,7 +527,9 @@ public class GitRepo implements Closeable {\n         merge);\n   }\n \n-  /** @param pathFilter use when filtering commits */\n+  /**\n+   * @param pathFilter use when filtering commits\n+   */\n   public void setTreeFilter(final String pathFilter) {\n     this.pathFilter = pathFilter == null ? \"\" : pathFilter;\n   }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java\n\n@@ -33,10 +33,10 @@ public final class ResourceLoader {\n           throw new FileNotFoundException(\n               \"Was unable to find file, or resouce, \\\"\" + resourceName + \"\\\"\");\n         }\n-        templateString =\n-            new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))\n-                .lines()\n-                .collect(Collectors.joining(\"\\n\"));\n+        try (BufferedReader br =\n+            new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))) {\n+          templateString = br.lines().collect(Collectors.joining(\"\\n\"));\n+        }\n       }\n     } catch (final IOException e) {\n       throw new RuntimeException(resourceName, e);\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java | file path B: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java\n\n@@ -12,11 +12,9 @@ import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n-\n import org.eclipse.jgit.lib.ObjectId;\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.internal.git.model.GitCommit;\n import se.bjurr.gitchangelog.internal.git.model.GitTag;\n \n\n\n###\n\n", "completion": "fix: closing loaded resource"}
{"prompt": " file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt\n\n@@ -836,10 +836,10 @@ context:\n           \"type\": \"JIRA\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt\n\n@@ -1077,10 +1077,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt\n\n@@ -1181,10 +1181,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt\n\n@@ -1181,10 +1181,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"refs/tags/test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt\n\n@@ -1160,10 +1160,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt\n\n@@ -1152,10 +1152,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt\n\n@@ -1206,10 +1206,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt\n\n@@ -69,7 +69,7 @@ settings:\n \n changelog:\n \n-## No tag\n+## test\n  false\n  true\n   bug\n@@ -1091,10 +1091,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt\n\n@@ -1067,10 +1067,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt\n\n@@ -1073,10 +1073,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -98,7 +98,7 @@ settings:\n \n changelog:\n \n-## No tag\n+## test\n \n Bugs\n false \n@@ -1255,10 +1255,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt\n\n@@ -105,7 +105,7 @@ changelog:\n \n Changelog of Git Changelog.\n \n-## No tag\n+## test\n ### Bugs\n \n #### Mixed bugs\n@@ -1247,10 +1247,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt\n\n@@ -1166,10 +1166,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt\n\n@@ -1184,10 +1184,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt\n\n@@ -79,7 +79,7 @@ changelog:\n \n Changelog of Git Changelog.\n \n-## No tag\n+## test (2016-04-06 18:40:51)\n \n ### Tomas Bjerre - 2016-04-06 18:40:51\n [8371342ad0d887d](https://server/8371342ad0d887d)\n@@ -1165,10 +1165,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt\n\n@@ -89,7 +89,7 @@ changelog:\n \n Changelog of Git Changelog.\n \n-## No tag\n+## test\n \n ### Bugs Mixed bugs\n * Tomas Bjerre\n@@ -1186,10 +1186,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt\n\n@@ -85,7 +85,7 @@ changelog:\n \n Changelog of Git Changelog.\n \n-## No tag\n+## test\n \n ### Bugs Mixed bugs\n [20e333f8e108f77](https://server/20e333f8e108f77) 2016-03-19 20:32:19\n@@ -1156,10 +1156,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt\n\n@@ -1155,10 +1155,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatPartialsCanBeIncluded.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatPartialsCanBeIncluded.approved.txt\n\n@@ -1135,10 +1135,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testUrlParts.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testUrlParts.approved.txt\n\n@@ -1072,10 +1072,10 @@ context:\n           \"type\": \"NOISSUE\"\n         }\n       ],\n-      \"name\": \"No tag\",\n-      \"tagTime\": \"\",\n-      \"tagTimeLong\": -1,\n-      \"hasTagTime\": false\n+      \"name\": \"test\",\n+      \"tagTime\": \"2016-04-06 18:40:51\",\n+      \"tagTimeLong\": 1459968051000,\n+      \"hasTagTime\": true\n     },\n     {\n       \"authors\": [\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java | file path B: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java\n\n@@ -12,9 +12,11 @@ import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n+\n import org.eclipse.jgit.lib.ObjectId;\n import org.junit.Before;\n import org.junit.Test;\n+\n import se.bjurr.gitchangelog.internal.git.model.GitCommit;\n import se.bjurr.gitchangelog.internal.git.model.GitTag;\n \n@@ -193,8 +195,8 @@ public class GitRepoTest {\n         .hasSize(1);\n     assertThat(perTag.keySet()) //\n         .hasSize(1) //\n-        .contains(\"No tag\");\n-    final GitTag noTagTag = perTag.get(\"No tag\");\n+        .contains(\"refs/tags/test\");\n+    final GitTag noTagTag = perTag.get(\"refs/tags/test\");\n \n     final List<String> noTagTagMessages = this.messages(noTagTag.getGitCommits());\n     assertThat(noTagTagMessages) //\n@@ -217,9 +219,9 @@ public class GitRepoTest {\n     assertThat(perTag.keySet()) //\n         .hasSize(2) //\n         .containsExactly( //\n-            \"No tag\", //\n-            \"refs/tags/tag-in-test-feature\");\n-    final GitTag noTagTag = perTag.get(\"No tag\");\n+            \"refs/tags/tag-in-test-feature\", //\n+            \"refs/tags/test\");\n+    final GitTag noTagTag = perTag.get(\"refs/tags/test\");\n     final List<String> noTagNames = this.messages(noTagTag.getGitCommits());\n     assertThat(noTagNames) //\n         .containsExactly( //\n@@ -243,13 +245,13 @@ public class GitRepoTest {\n     final ObjectId to = gitRepo.getCommit(\"8371342\");\n \n     final GitRepoData gitRepoData =\n-        gitRepo.getGitRepoData(from, to, \"No tag\", Optional.<String>empty());\n+        gitRepo.getGitRepoData(from, to, \"refs/tags/test\", Optional.<String>empty());\n     final Map<String, GitTag> perTag = this.perTag(gitRepoData.getGitTags());\n     assertThat(perTag.keySet()) //\n         .hasSize(1) //\n         .containsExactly( //\n-            \"No tag\");\n-    final GitTag noTagTag = perTag.get(\"No tag\");\n+            \"refs/tags/test\");\n+    final GitTag noTagTag = perTag.get(\"refs/tags/test\");\n     final List<String> noTagNames = this.messages(noTagTag.getGitCommits());\n     assertThat(noTagNames) //\n         .containsExactly( //\n\n\n###\n\n", "completion": "chore: trying to make it build"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -17,15 +17,15 @@ dependencies {\n \n  implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n  implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n- //implementation 'com.squareup.okhttp:okhttp:2.7.5'\n  implementation 'com.jayway.jsonpath:json-path:2.1.0'\n  implementation 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'\n  implementation 'org.gitlab:java-gitlab-api:4.1.0'\n \n+ testImplementation 'org.slf4j:slf4j-simple:1.8.0-beta4'\n  testImplementation 'junit:junit:4.12'\n  testImplementation 'org.slf4j:slf4j-simple:1.7.13'\n  testImplementation 'org.assertj:assertj-core:2.3.0'\n  testImplementation 'org.mockito:mockito-all:1.8.5'\n- testImplementation 'com.approvaltests:approvaltests:9.5.0'\n+ testImplementation 'com.approvaltests:approvaltests:15.0.0'\n  testImplementation 'org.mockito:mockito-core:3.10.0'\n }\n\n\n###\n\n", "completion": "chore: stepping Approvals version"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.166.0 (2022-04-03)\n+\n+\n+\n+### Features\n+\n+-  new variable urlParts ([163f7](https://github.com/tomasbjerre/git-changelog-lib/commit/163f7c4a50cba46) Tomas Bjerre)  [#128](https://github.com/tomasbjerre/git-changelog-lib/issues/128)  \n+\n+\n+\n+\n+\n ## 1.165.2 (2022-03-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.166.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Mar 17 20:27:17 CET 2022\n-version=1.165.2\n+#Sun Apr 03 12:14:18 CEST 2022\n+version=1.166.0\n description='Library for parsing report files from static code analysis'\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.166.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.165.2 (2022-03-17)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  avoid looking for master if HEAD found ([a4a50](https://github.com/tomasbjerre/git-changelog-lib/commit/a4a505e23712c1c) Tomas Bjerre)  [#127](https://github.com/tomasbjerre/git-changelog-lib/issues/127)  \n+\n+\n+\n ## 1.165.1 (2022-03-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.165.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Mar 17 20:24:25 CET 2022\n-version=1.165.1\n+#Thu Mar 17 20:27:17 CET 2022\n+version=1.165.2\n description='Library for parsing report files from static code analysis'\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -9,6 +9,11 @@ import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.ZERO_COMMIT;\n import static se.bjurr.gitchangelog.internal.git.GitRepoDataHelper.removeCommitsWithoutIssue;\n import static se.bjurr.gitchangelog.internal.settings.Settings.fromFile;\n \n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Helper;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.io.FileTemplateLoader;\n import java.io.File;\n import java.io.IOException;\n import java.io.StringWriter;\n@@ -23,15 +28,7 @@ import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n-\n import org.eclipse.jgit.lib.ObjectId;\n-\n-import com.github.jknack.handlebars.Context;\n-import com.github.jknack.handlebars.Handlebars;\n-import com.github.jknack.handlebars.Helper;\n-import com.github.jknack.handlebars.Template;\n-import com.github.jknack.handlebars.io.FileTemplateLoader;\n-\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n import se.bjurr.gitchangelog.api.helpers.Helpers;\n import se.bjurr.gitchangelog.api.model.Changelog;\n@@ -634,9 +631,9 @@ public class GitChangelogApi {\n     } else {\n       final Optional<ObjectId> headOpt = gitRepo.findRef(REF_HEAD);\n       if (headOpt.isPresent()) {\n-    \t  toId = headOpt.get();\n+        toId = headOpt.get();\n       } else {\n-    \t  toId = gitRepo.getRef(REF_MASTER);\n+        toId = gitRepo.getRef(REF_MASTER);\n       }\n     }\n     GitRepoData gitRepoData =\n\n\n###\n\n", "completion": "chore(release): 1.165.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -9,11 +9,6 @@ import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.ZERO_COMMIT;\n import static se.bjurr.gitchangelog.internal.git.GitRepoDataHelper.removeCommitsWithoutIssue;\n import static se.bjurr.gitchangelog.internal.settings.Settings.fromFile;\n \n-import com.github.jknack.handlebars.Context;\n-import com.github.jknack.handlebars.Handlebars;\n-import com.github.jknack.handlebars.Helper;\n-import com.github.jknack.handlebars.Template;\n-import com.github.jknack.handlebars.io.FileTemplateLoader;\n import java.io.File;\n import java.io.IOException;\n import java.io.StringWriter;\n@@ -28,7 +23,15 @@ import java.util.Map.Entry;\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n+\n import org.eclipse.jgit.lib.ObjectId;\n+\n+import com.github.jknack.handlebars.Context;\n+import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Helper;\n+import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.io.FileTemplateLoader;\n+\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n import se.bjurr.gitchangelog.api.helpers.Helpers;\n import se.bjurr.gitchangelog.api.model.Changelog;\n@@ -629,7 +632,12 @@ public class GitChangelogApi {\n     if (toIdOpt.isPresent()) {\n       toId = toIdOpt.get();\n     } else {\n-      toId = gitRepo.findRef(REF_HEAD).orElse(gitRepo.getRef(REF_MASTER));\n+      final Optional<ObjectId> headOpt = gitRepo.findRef(REF_HEAD);\n+      if (headOpt.isPresent()) {\n+    \t  toId = headOpt.get();\n+      } else {\n+    \t  toId = gitRepo.getRef(REF_MASTER);\n+      }\n     }\n     GitRepoData gitRepoData =\n         gitRepo.getGitRepoData(\n\n\n###\n\n", "completion": "fix: avoid looking for master if HEAD found (refs #127)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.165.1 (2022-03-17)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  upper case HEAD ([08ad3](https://github.com/tomasbjerre/git-changelog-lib/commit/08ad394f8975d56) Tomas Bjerre)  [#127](https://github.com/tomasbjerre/git-changelog-lib/issues/127)  \n+\n+\n+\n ## 1.165.0 (2022-03-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.165.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Mar 17 20:09:51 CET 2022\n+#Thu Mar 17 20:24:25 CET 2022\n+version=1.165.1\n description='Library for parsing report files from static code analysis'\n-version=1.165.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.165.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -4,7 +4,7 @@ public final class GitChangelogApiConstants {\n \n   public static final String ZERO_COMMIT = \"0000000000000000000000000000000000000000\";\n   public static final String REF_MASTER = \"master\";\n-  public static final String REF_HEAD = \"head\";\n+  public static final String REF_HEAD = \"HEAD\";\n   public static final boolean DEFAULT_REMOVE_ISSUE = false;\n   public static final String DEFAULT_TIMEZONE = \"UTC\";\n   public static final String DEFAULT_DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -527,9 +527,7 @@ public class GitRepo implements Closeable {\n         merge);\n   }\n \n-  /**\n-   * @param pathFilter use when filtering commits\n-   */\n+  /** @param pathFilter use when filtering commits */\n   public void setTreeFilter(final String pathFilter) {\n     this.pathFilter = pathFilter == null ? \"\" : pathFilter;\n   }\n\n\n###\n\n", "completion": "fix: upper case HEAD (refs #127)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.165.0 (2022-03-17)\n+\n+\n+\n+### Features\n+\n+-  fall back on HEAD and MASTER if no toRef is given ([9c05c](https://github.com/tomasbjerre/git-changelog-lib/commit/9c05c8e7b476b68) Tomas Bjerre)  [#127](https://github.com/tomasbjerre/git-changelog-lib/issues/127)  \n+\n+\n+\n+\n+\n ## 1.164.5 (2022-03-10)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.165.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Mar 10 19:14:50 CET 2022\n+#Thu Mar 17 20:09:51 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.5\n+version=1.165.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.165.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -3,6 +3,7 @@ package se.bjurr.gitchangelog.api;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Optional.empty;\n import static java.util.Optional.of;\n+import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.REF_HEAD;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.REF_MASTER;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.ZERO_COMMIT;\n import static se.bjurr.gitchangelog.internal.git.GitRepoDataHelper.removeCommitsWithoutIssue;\n@@ -628,7 +629,7 @@ public class GitChangelogApi {\n     if (toIdOpt.isPresent()) {\n       toId = toIdOpt.get();\n     } else {\n-      toId = gitRepo.getRef(REF_MASTER);\n+      toId = gitRepo.findRef(REF_HEAD).orElse(gitRepo.getRef(REF_MASTER));\n     }\n     GitRepoData gitRepoData =\n         gitRepo.getGitRepoData(\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -4,6 +4,7 @@ public final class GitChangelogApiConstants {\n \n   public static final String ZERO_COMMIT = \"0000000000000000000000000000000000000000\";\n   public static final String REF_MASTER = \"master\";\n+  public static final String REF_HEAD = \"head\";\n   public static final boolean DEFAULT_REMOVE_ISSUE = false;\n   public static final String DEFAULT_TIMEZONE = \"UTC\";\n   public static final String DEFAULT_DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -139,6 +139,14 @@ public class GitRepo implements Closeable {\n     throw new GitChangelogRepositoryException(fromRef + \" not found in:\\n\" + this.toString());\n   }\n \n+  public Optional<ObjectId> findRef(final String ref) {\n+    try {\n+      return Optional.of(this.getRef(ref));\n+    } catch (final Exception e) {\n+      return Optional.empty();\n+    }\n+  }\n+\n   @Override\n   public String toString() {\n     final StringBuilder sb = new StringBuilder();\n\n\n###\n\n", "completion": "feat: fall back on HEAD and MASTER if no toRef is given (refs #127)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,45 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.164.5 (2022-03-10)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  can build on java 17 ([7dc00](https://github.com/tomasbjerre/git-changelog-lib/commit/7dc00e2f3d09f41) Tomas Bjerre)  \n+\n+\n+### Other changes\n+\n+**Extra helpers to sort issue per type**\n+\n+\n+[96ef6](https://github.com/tomasbjerre/git-changelog-lib/commit/96ef6bb7bf71ad8) Maarten *2022-03-10 17:56:26*\n+\n+**Extra helpers to sort issue per type**\n+\n+\n+[1d00b](https://github.com/tomasbjerre/git-changelog-lib/commit/1d00b86f62349f2) Maarten *2022-03-10 13:31:10*\n+\n+**Extra helpers to sort issue per type**\n+\n+\n+[e2f70](https://github.com/tomasbjerre/git-changelog-lib/commit/e2f705f05e4f71e) Maarten *2022-03-10 13:18:22*\n+\n+**Extra helpers to sort issue per type**\n+\n+\n+[876af](https://github.com/tomasbjerre/git-changelog-lib/commit/876aff976380fa0) Maarten *2022-03-10 12:53:55*\n+\n+**Extra helpers to sort issue per type**\n+\n+\n+[f46ad](https://github.com/tomasbjerre/git-changelog-lib/commit/f46ada51ee82eae) Maarten *2022-02-25 15:05:44*\n+\n+\n ## 1.164.4 (2022-02-14)\n \n \n@@ -2603,3 +2642,19 @@ Changelog of git-changelog-lib.\n [5aaeb](https://github.com/tomasbjerre/git-changelog-lib/commit/5aaeb907f68915a) Tomas Bjerre *2015-11-14 09:46:23*\n \n \n+## 0.0.1 (2015-11-12)\n+\n+\n+\n+\n+\n+\n+\n+### Other changes\n+\n+**Initial commit**\n+\n+\n+[a1aa5](https://github.com/tomasbjerre/git-changelog-lib/commit/a1aa5ff5b625e63) Tomas Bjerre *2015-11-12 05:29:31*\n+\n+\n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.164.5 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Feb 14 22:33:43 CET 2022\n+#Thu Mar 10 19:14:50 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.4\n+version=1.164.5\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.164.5 [GRADLE SCRIPT]"}
{"prompt": " file path A: README.md | file path B: README.md\n\n@@ -191,7 +191,7 @@ Conditional, renders a block if given `List<Issue>` contains given `type`.\n Conditional, renders a block if given `List<Issue>` contains issues that don't match the given `type`.\n \n ```hbs\n-{{#ifContainsIssueTypeOtherThan commits type=\"fix\"}}\n+{{#ifContainsIssueTypeOtherThan issues type=\"fix\"}}\n   commits contains other types than fix\n {{/ifContainsIssueTypeOtherThan}}\n ```\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -2,40 +2,42 @@ template:\n \n {{#tags}}\n ## {{name}}\n+{{#issues}}\n+\n+{{name}}\n+{{hasType}} {{type}}\n+isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n+isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n+isJira: {{#isJira}}yes{{/isJira}}\n+isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n+isCustom: {{#isCustom}}yes{{/isCustom}}\n+isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n+\n+{{/issues}}\n+{{/tags}}\n+\n \n+Issues:\n {{#ifContainsIssueType issues type='Bug'}}\n {{#issues}}\n {{#ifIssueType . type='Bug'}}\n ### Bugs\n {{name}}\n-{{hasType}} {{type}}\n-isGitHub: {{isGitHub}}\n-isGitLab: {{isGitLab}}\n-isJira: {{isJira}}\n-isRedmine: {{isRedmine}}\n-isCustom: {{isCustom}}\n-isNoIssue: {{isNoIssue}}\n \n {{/ifIssueType}}\n {{/issues}}\n {{/ifContainsIssueType}}\n+\n+\n {{#ifContainsIssueTypeOtherThan issues type='Bug'}}\n {{#issues}}\n {{#ifIssueTypeOtherThan . type='Bug'}}\n ### Other issues\n {{name}}\n-{{hasType}} {{type}}\n-isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n-isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n-isJira: {{#isJira}}yes{{/isJira}}\n-isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n-isCustom: {{#isCustom}}yes{{/isCustom}}\n-isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n \n {{/ifIssueTypeOtherThan}}\n {{/issues}}\n {{/ifContainsIssueTypeOtherThan}}\n-{{/tags}}\n \n ---------------------------------------------\n \n@@ -98,9 +100,8 @@ changelog:\n \n ## No tag\n \n-### Bugs\n-Jira\n-true Bug\n+Bugs\n+false \n isGitHub: \n isGitLab: \n isJira: \n@@ -108,8 +109,8 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n-Bugs\n+\n+GitHub\n false \n isGitHub: \n isGitLab: \n@@ -118,7 +119,7 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n+\n GitHub\n false \n isGitHub: \n@@ -128,7 +129,7 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n+\n GitHub\n false \n isGitHub: \n@@ -138,9 +139,9 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n-GitHub\n-false \n+\n+Jira\n+true Bug\n isGitHub: \n isGitLab: \n isJira: \n@@ -148,7 +149,7 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n+\n No issue supplied\n false \n isGitHub: \n@@ -160,7 +161,6 @@ isNoIssue:\n \n ## test-lightweight-2\n \n-### Other issues\n CQ\n false \n isGitHub: \n@@ -172,9 +172,8 @@ isNoIssue:\n \n ## test-1.0\n \n-### Bugs\n-Jira\n-true Bug\n+GitHub\n+false \n isGitHub: \n isGitLab: \n isJira: \n@@ -182,7 +181,7 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n+\n GitHub\n false \n isGitHub: \n@@ -192,9 +191,9 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n-GitHub\n-false \n+\n+Jira\n+true Bug\n isGitHub: \n isGitLab: \n isJira: \n@@ -202,7 +201,7 @@ isRedmine:\n isCustom: \n isNoIssue: \n \n-### Other issues\n+\n No issue supplied\n false \n isGitHub: \n@@ -214,7 +213,6 @@ isNoIssue:\n \n ## 0.0.1\n \n-### Other issues\n No issue supplied\n false \n isGitHub: \n@@ -226,6 +224,38 @@ isNoIssue:\n \n \n \n+Issues:\n+### Bugs\n+Jira\n+\n+### Bugs\n+Jira\n+\n+\n+\n+### Other issues\n+Bugs\n+\n+### Other issues\n+CQ\n+\n+### Other issues\n+GitHub\n+\n+### Other issues\n+GitHub\n+\n+### Other issues\n+GitHub\n+\n+### Other issues\n+GitHub\n+\n+### Other issues\n+No issue supplied\n+\n+\n+\n ---------------------------------------------\n \n context:\n@@ -3530,4 +3560,4 @@ context:\n   ],\n   \"ownerName\": \"tomasbjerre\",\n   \"repoName\": \"git-changelog-lib\"\n-}\n+}\n\\ No newline at end of file\n\n---\n file path A: src/test/resources/templatetest/testIssueType.mustache | file path B: src/test/resources/templatetest/testIssueType.mustache\n\n@@ -1,36 +1,38 @@\n {{#tags}}\n ## {{name}}\n+{{#issues}}\n+\n+{{name}}\n+{{hasType}} {{type}}\n+isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n+isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n+isJira: {{#isJira}}yes{{/isJira}}\n+isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n+isCustom: {{#isCustom}}yes{{/isCustom}}\n+isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n+\n+{{/issues}}\n+{{/tags}}\n \n+\n+Issues:\n {{#ifContainsIssueType issues type='Bug'}}\n {{#issues}}\n {{#ifIssueType . type='Bug'}}\n ### Bugs\n {{name}}\n-{{hasType}} {{type}}\n-isGitHub: {{isGitHub}}\n-isGitLab: {{isGitLab}}\n-isJira: {{isJira}}\n-isRedmine: {{isRedmine}}\n-isCustom: {{isCustom}}\n-isNoIssue: {{isNoIssue}}\n \n {{/ifIssueType}}\n {{/issues}}\n {{/ifContainsIssueType}}\n+\n+\n {{#ifContainsIssueTypeOtherThan issues type='Bug'}}\n {{#issues}}\n {{#ifIssueTypeOtherThan . type='Bug'}}\n ### Other issues\n {{name}}\n-{{hasType}} {{type}}\n-isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n-isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n-isJira: {{#isJira}}yes{{/isJira}}\n-isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n-isCustom: {{#isCustom}}yes{{/isCustom}}\n-isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n \n {{/ifIssueTypeOtherThan}}\n {{/issues}}\n {{/ifContainsIssueTypeOtherThan}}\n-{{/tags}}\n\n\n###\n\n", "completion": "chore: minor adjustments"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -13,10 +13,10 @@ apply from: project.buildscript.classLoader.getResource('main.gradle').toURI()\n \n \n dependencies {\n- api 'com.github.jknack:handlebars:4.2.0'\n+ api 'com.github.jknack:handlebars:4.3.0'\n \n- implementation 'com.squareup.retrofit2:retrofit:2.0.0'\n- implementation 'com.squareup.retrofit2:converter-gson:2.0.0'\n+ implementation 'com.squareup.retrofit2:retrofit:2.9.0'\n+ implementation 'com.squareup.retrofit2:converter-gson:2.9.0'\n  //implementation 'com.squareup.okhttp:okhttp:2.7.5'\n  implementation 'com.jayway.jsonpath:json-path:2.1.0'\n  implementation 'org.eclipse.jgit:org.eclipse.jgit:5.10.0.202012080955-r'\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -6,12 +6,12 @@ template:\n \n {{name}}\n {{hasType}} {{type}}\n-isGitHub: {{isGitHub}}\n-isGitLab: {{isGitLab}}\n-isJira: {{isJira}}\n-isRedmine: {{isRedmine}}\n-isCustom: {{isCustom}}\n-isNoIssue: {{isNoIssue}}\n+isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n+isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n+isJira: {{#isJira}}yes{{/isJira}}\n+isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n+isCustom: {{#isCustom}}yes{{/isCustom}}\n+isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n \n {{/issues}}\n {{/tags}}\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.java\n\n@@ -24,7 +24,7 @@ public class HandlebarsHelperTest {\n             .withToCommit(\"e78a62f\");\n   }\n \n-  @Test\n+  // @Test //Available depending on JVM\n   public void testThatHelperCanBeSuppliedWithJavascript() throws Exception {\n     final GitChangelogApi given =\n         this.baseBuilder //\n\n---\n file path A: src/test/resources/templatetest/testIssueType.mustache | file path B: src/test/resources/templatetest/testIssueType.mustache\n\n@@ -4,12 +4,12 @@\n \n {{name}}\n {{hasType}} {{type}}\n-isGitHub: {{isGitHub}}\n-isGitLab: {{isGitLab}}\n-isJira: {{isJira}}\n-isRedmine: {{isRedmine}}\n-isCustom: {{isCustom}}\n-isNoIssue: {{isNoIssue}}\n+isGitHub: {{#isGitHub}}yes{{/isGitHub}}\n+isGitLab: {{#isGitLab}}yes{{/isGitLab}}\n+isJira: {{#isJira}}yes{{/isJira}}\n+isRedmine: {{#isRedmine}}yes{{/isRedmine}}\n+isCustom: {{#isCustom}}yes{{/isCustom}}\n+isNoIssue: {{#isNoIssue}}yes{{/isNoIssue}}\n \n {{/issues}}\n {{/tags}}\n\n\n###\n\n", "completion": "fix: can build on java 17"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,19 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.164.4 (2022-02-14)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  include tag on first commit ([bd384](https://github.com/tomasbjerre/git-changelog-lib/commit/bd38460e98d3a07) Tomas Bjerre)  \n+-  include first commit ([66a16](https://github.com/tomasbjerre/git-changelog-lib/commit/66a1650fd51f679) Tomas Bjerre)  \n+\n+\n+\n ## 1.164.3 (2022-01-20)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.164.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jan 20 16:13:50 CET 2022\n+#Mon Feb 14 22:33:43 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.3\n+version=1.164.4\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/git/GitRepo.java\n\n@@ -20,7 +20,6 @@ import java.util.Set;\n import java.util.TreeMap;\n import java.util.TreeSet;\n import java.util.stream.Collectors;\n-\n import org.eclipse.jgit.api.Git;\n import org.eclipse.jgit.api.LogCommand;\n import org.eclipse.jgit.lib.AnyObjectId;\n@@ -33,7 +32,6 @@ import org.eclipse.jgit.revwalk.RevWalk;\n import org.eclipse.jgit.storage.file.FileRepositoryBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import se.bjurr.gitchangelog.api.GitChangelogApiConstants;\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n import se.bjurr.gitchangelog.internal.git.model.GitCommit;\n@@ -483,7 +481,8 @@ public class GitRepo implements Closeable {\n     return this.hasPathFilter() || this.commitsToInclude.contains(candidate);\n   }\n \n-  private List<Ref> tagsBetweenFromAndTo(final RevCommit from, final RevCommit to) throws Exception {\n+  private List<Ref> tagsBetweenFromAndTo(final RevCommit from, final RevCommit to)\n+      throws Exception {\n     final List<Ref> tagList = this.git.tagList().call();\n     final List<RevCommit> icludedCommits = new ArrayList<>();\n     final Iterator<RevCommit> itr = this.git.log().addRange(from, to).call().iterator();\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -12,11 +12,9 @@ import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubMockInterceptor;\n import se.bjurr.gitchangelog.internal.integrations.github.GitHubServiceFactory;\n import se.bjurr.gitchangelog.internal.integrations.jira.JiraClientFactory;\n@@ -83,16 +81,16 @@ public class GitChangelogApiTest {\n     GitHubServiceFactory.setInterceptor(null);\n     mock(null);\n   }\n-    @Test\n-    public void testThatFirstVersionCanBeGenerated() throws Exception {\n-      final GitChangelogApi given =\n-          gitChangelogApiBuilder() //\n-              .withFromCommit(ZERO_COMMIT) //\n-              .withToCommit(\"0.0.1\");\n \n-      ApprovalsWrapper.verify(given);\n-    }\n+  @Test\n+  public void testThatFirstVersionCanBeGenerated() throws Exception {\n+    final GitChangelogApi given =\n+        gitChangelogApiBuilder() //\n+            .withFromCommit(ZERO_COMMIT) //\n+            .withToCommit(\"0.0.1\");\n \n+    ApprovalsWrapper.verify(given);\n+  }\n \n   @Test\n   public void testThatSecondVersionCanBeGenerated() throws Exception {\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java | file path B: src/test/java/se/bjurr/gitchangelog/internal/git/GitRepoTest.java\n\n@@ -12,11 +12,9 @@ import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n import java.util.TreeMap;\n-\n import org.eclipse.jgit.lib.ObjectId;\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.internal.git.model.GitCommit;\n import se.bjurr.gitchangelog.internal.git.model.GitTag;\n \n\n\n###\n\n", "completion": "chore(release): 1.164.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -83,6 +83,16 @@ public class GitChangelogApiTest {\n     GitHubServiceFactory.setInterceptor(null);\n     mock(null);\n   }\n+    @Test\n+    public void testThatFirstVersionCanBeGenerated() throws Exception {\n+      final GitChangelogApi given =\n+          gitChangelogApiBuilder() //\n+              .withFromCommit(ZERO_COMMIT) //\n+              .withToCommit(\"0.0.1\");\n+\n+      ApprovalsWrapper.verify(given);\n+    }\n+\n \n   @Test\n   public void testThatSecondVersionCanBeGenerated() throws Exception {\n\n---\n file path A: None | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatFirstVersionCanBeGenerated.approved.txt\n\n@@ -0,0 +1,372 @@\n+template:\n+\n+# {{repoName}} changelog\n+\n+Changelog of {{repoName}}.\n+\n+{{#tags}}\n+{{#ifEquals name \"Unreleased\"}}{{else}}\n+## {{name}} ({{tagDate .}})\n+\n+{{#ifContainsBreaking commits}}\n+### Breaking changes\n+\n+{{#commits}}\n+{{#ifCommitBreaking .}}\n+- {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{subString hash 0 5}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}}) {{#eachCommitRefs .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitRefs}} {{#eachCommitFixes .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitFixes}}\n+{{/ifCommitBreaking}}\n+{{/commits}}\n+{{/ifContainsBreaking}}\n+\n+\n+{{#ifContainsType commits type='feat'}}\n+### Features\n+\n+{{#commits}}\n+{{#ifCommitType . type='feat'}}\n+- {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{subString hash 0 5}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}}) {{#eachCommitRefs .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitRefs}} {{#eachCommitFixes .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitFixes}}\n+{{/ifCommitType}}\n+{{/commits}}\n+{{/ifContainsType}}\n+\n+\n+{{#ifContainsType commits type='fix'}}\n+### Bug Fixes\n+\n+{{#commits}}\n+{{#ifCommitType . type='fix'}}\n+- {{#eachCommitScope .}} **{{.}}** {{/eachCommitScope}} {{{commitDescription .}}} ([{{subString hash 0 5}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}}) {{#eachCommitRefs .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitRefs}} {{#eachCommitFixes .}}{{#ifMatches . \"^#[0-9]+\"}} [{{.}}](https://github.com/{{ownerName}}/{{repoName}}/issues/{{subString . 1}}) {{/ifMatches}}{{/eachCommitFixes}}\n+{{/ifCommitType}}\n+{{/commits}}\n+{{/ifContainsType}}\n+\n+\n+{{#ifContainsType commits type='^($|(?!fix|feat|breaking))'}}\n+### Other changes\n+\n+{{#commits}}\n+{{#ifCommitType . type='^($|(?!fix|feat|breaking))'}}\n+**{{{messageTitle}}}**\n+\n+{{#messageBodyItems}}\n+* {{.}} \n+{{/messageBodyItems}}\n+\n+[{{subString hash 0 5}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}} *{{commitTime}}*\n+\n+{{/ifCommitType}}\n+{{/commits}}\n+{{/ifContainsType}}\n+\n+{{/ifEquals}}\n+{{/tags}}\n+\n+---------------------------------------------\n+\n+settings:\n+\n+{\n+  \"fromCommit\": \"0000000000000000000000000000000000000000\",\n+  \"toCommit\": \"0.0.1\",\n+  \"removeIssueFromMessage\": false,\n+  \"jiraEnabled\": false,\n+  \"redmineEnabled\": false,\n+  \"gitHubEnabled\": false,\n+  \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n+  \"extendedVariables\": {},\n+  \"ignoreCommitsWithoutIssue\": false,\n+  \"gitLabEnabled\": false,\n+  \"gitLabProjectName\": \"tomasbjerre\",\n+  \"useIntegrations\": false\n+}\n+\n+---------------------------------------------\n+\n+changelog:\n+\n+# git-changelog-lib changelog\n+\n+Changelog of git-changelog-lib.\n+\n+\n+\n+---------------------------------------------\n+\n+context:\n+\n+{\n+  \"commits\": [\n+    {\n+      \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+      \"authorName\": \"Tomas Bjerre\",\n+      \"commitTime\": \"2015-11-12 05:29:31\",\n+      \"commitTimeLong\": 1447306171000,\n+      \"hash\": \"a1aa5ff5b625e63\",\n+      \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+      \"merge\": false,\n+      \"message\": \"Initial commit\"\n+    }\n+  ],\n+  \"tags\": [\n+    {\n+      \"authors\": [\n+        {\n+          \"commits\": [\n+            {\n+              \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"commitTime\": \"2015-11-12 05:29:31\",\n+              \"commitTimeLong\": 1447306171000,\n+              \"hash\": \"a1aa5ff5b625e63\",\n+              \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+              \"merge\": false,\n+              \"message\": \"Initial commit\"\n+            }\n+          ],\n+          \"authorName\": \"Tomas Bjerre\",\n+          \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+        }\n+      ],\n+      \"commits\": [\n+        {\n+          \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+          \"authorName\": \"Tomas Bjerre\",\n+          \"commitTime\": \"2015-11-12 05:29:31\",\n+          \"commitTimeLong\": 1447306171000,\n+          \"hash\": \"a1aa5ff5b625e63\",\n+          \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+          \"merge\": false,\n+          \"message\": \"Initial commit\"\n+        }\n+      ],\n+      \"issues\": [\n+        {\n+          \"commits\": [\n+            {\n+              \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"commitTime\": \"2015-11-12 05:29:31\",\n+              \"commitTimeLong\": 1447306171000,\n+              \"hash\": \"a1aa5ff5b625e63\",\n+              \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+              \"merge\": false,\n+              \"message\": \"Initial commit\"\n+            }\n+          ],\n+          \"authors\": [\n+            {\n+              \"commits\": [\n+                {\n+                  \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+                  \"authorName\": \"Tomas Bjerre\",\n+                  \"commitTime\": \"2015-11-12 05:29:31\",\n+                  \"commitTimeLong\": 1447306171000,\n+                  \"hash\": \"a1aa5ff5b625e63\",\n+                  \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+                  \"merge\": false,\n+                  \"message\": \"Initial commit\"\n+                }\n+              ],\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+            }\n+          ],\n+          \"name\": \"No issue\",\n+          \"title\": \"\",\n+          \"hasTitle\": false,\n+          \"issue\": \"\",\n+          \"hasIssue\": false,\n+          \"link\": \"\",\n+          \"hasLink\": false,\n+          \"type\": \"\",\n+          \"hasType\": false,\n+          \"hasDescription\": false,\n+          \"description\": \"\",\n+          \"hasLabels\": false,\n+          \"hasLinkedIssues\": false,\n+          \"issueType\": \"NOISSUE\"\n+        }\n+      ],\n+      \"issueTypes\": [\n+        {\n+          \"name\": \"No issue\",\n+          \"issues\": [\n+            {\n+              \"commits\": [\n+                {\n+                  \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+                  \"authorName\": \"Tomas Bjerre\",\n+                  \"commitTime\": \"2015-11-12 05:29:31\",\n+                  \"commitTimeLong\": 1447306171000,\n+                  \"hash\": \"a1aa5ff5b625e63\",\n+                  \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+                  \"merge\": false,\n+                  \"message\": \"Initial commit\"\n+                }\n+              ],\n+              \"authors\": [\n+                {\n+                  \"commits\": [\n+                    {\n+                      \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+                      \"authorName\": \"Tomas Bjerre\",\n+                      \"commitTime\": \"2015-11-12 05:29:31\",\n+                      \"commitTimeLong\": 1447306171000,\n+                      \"hash\": \"a1aa5ff5b625e63\",\n+                      \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+                      \"merge\": false,\n+                      \"message\": \"Initial commit\"\n+                    }\n+                  ],\n+                  \"authorName\": \"Tomas Bjerre\",\n+                  \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+                }\n+              ],\n+              \"name\": \"No issue\",\n+              \"title\": \"\",\n+              \"hasTitle\": false,\n+              \"issue\": \"\",\n+              \"hasIssue\": false,\n+              \"link\": \"\",\n+              \"hasLink\": false,\n+              \"type\": \"\",\n+              \"hasType\": false,\n+              \"hasDescription\": false,\n+              \"description\": \"\",\n+              \"hasLabels\": false,\n+              \"hasLinkedIssues\": false,\n+              \"issueType\": \"NOISSUE\"\n+            }\n+          ],\n+          \"type\": \"NOISSUE\"\n+        }\n+      ],\n+      \"name\": \"Unreleased\",\n+      \"tagTime\": \"\",\n+      \"tagTimeLong\": -1,\n+      \"hasTagTime\": false\n+    }\n+  ],\n+  \"authors\": [\n+    {\n+      \"commits\": [\n+        {\n+          \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+          \"authorName\": \"Tomas Bjerre\",\n+          \"commitTime\": \"2015-11-12 05:29:31\",\n+          \"commitTimeLong\": 1447306171000,\n+          \"hash\": \"a1aa5ff5b625e63\",\n+          \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+          \"merge\": false,\n+          \"message\": \"Initial commit\"\n+        }\n+      ],\n+      \"authorName\": \"Tomas Bjerre\",\n+      \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+    }\n+  ],\n+  \"issues\": [\n+    {\n+      \"commits\": [\n+        {\n+          \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+          \"authorName\": \"Tomas Bjerre\",\n+          \"commitTime\": \"2015-11-12 05:29:31\",\n+          \"commitTimeLong\": 1447306171000,\n+          \"hash\": \"a1aa5ff5b625e63\",\n+          \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+          \"merge\": false,\n+          \"message\": \"Initial commit\"\n+        }\n+      ],\n+      \"authors\": [\n+        {\n+          \"commits\": [\n+            {\n+              \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"commitTime\": \"2015-11-12 05:29:31\",\n+              \"commitTimeLong\": 1447306171000,\n+              \"hash\": \"a1aa5ff5b625e63\",\n+              \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+              \"merge\": false,\n+              \"message\": \"Initial commit\"\n+            }\n+          ],\n+          \"authorName\": \"Tomas Bjerre\",\n+          \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+        }\n+      ],\n+      \"name\": \"No issue\",\n+      \"title\": \"\",\n+      \"hasTitle\": false,\n+      \"issue\": \"\",\n+      \"hasIssue\": false,\n+      \"link\": \"\",\n+      \"hasLink\": false,\n+      \"type\": \"\",\n+      \"hasType\": false,\n+      \"hasDescription\": false,\n+      \"description\": \"\",\n+      \"hasLabels\": false,\n+      \"hasLinkedIssues\": false,\n+      \"issueType\": \"NOISSUE\"\n+    }\n+  ],\n+  \"issueTypes\": [\n+    {\n+      \"name\": \"No issue\",\n+      \"issues\": [\n+        {\n+          \"commits\": [\n+            {\n+              \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"commitTime\": \"2015-11-12 05:29:31\",\n+              \"commitTimeLong\": 1447306171000,\n+              \"hash\": \"a1aa5ff5b625e63\",\n+              \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+              \"merge\": false,\n+              \"message\": \"Initial commit\"\n+            }\n+          ],\n+          \"authors\": [\n+            {\n+              \"commits\": [\n+                {\n+                  \"authorEmailAddress\": \"tomas.bjerre85@gmail.com\",\n+                  \"authorName\": \"Tomas Bjerre\",\n+                  \"commitTime\": \"2015-11-12 05:29:31\",\n+                  \"commitTimeLong\": 1447306171000,\n+                  \"hash\": \"a1aa5ff5b625e63\",\n+                  \"hashFull\": \"a1aa5ff5b625e63aa5ad7b59367ec7f75658afb8\",\n+                  \"merge\": false,\n+                  \"message\": \"Initial commit\"\n+                }\n+              ],\n+              \"authorName\": \"Tomas Bjerre\",\n+              \"authorEmail\": \"tomas.bjerre85@gmail.com\"\n+            }\n+          ],\n+          \"name\": \"No issue\",\n+          \"title\": \"\",\n+          \"hasTitle\": false,\n+          \"issue\": \"\",\n+          \"hasIssue\": false,\n+          \"link\": \"\",\n+          \"hasLink\": false,\n+          \"type\": \"\",\n+          \"hasType\": false,\n+          \"hasDescription\": false,\n+          \"description\": \"\",\n+          \"hasLabels\": false,\n+          \"hasLinkedIssues\": false,\n+          \"issueType\": \"NOISSUE\"\n+        }\n+      ],\n+      \"type\": \"NOISSUE\"\n+    }\n+  ],\n+  \"ownerName\": \"tomasbjerre\",\n+  \"repoName\": \"git-changelog-lib\"\n+}\n\\ No newline at end of file\n\n\n###\n\n", "completion": "chore: cannot get changelog of first commit"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,25 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.164.3 (2022-01-20)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  Allow minus in scope for conventional commits ([98102](https://github.com/tomasbjerre/git-changelog-lib/commit/98102abce6b73f1) nurgling)  \n+\n+\n+### Other changes\n+\n+**fix regexp for conventional commits**\n+\n+\n+[772fb](https://github.com/tomasbjerre/git-changelog-lib/commit/772fb82693fdee7) Andreas Micklei *2022-01-19 22:40:19*\n+\n+\n ## 1.164.2 (2022-01-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.164.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon Jan 17 16:38:15 CET 2022\n+#Thu Jan 20 16:13:50 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.2\n+version=1.164.3\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java\n\n@@ -1,14 +1,12 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n+import com.github.jknack.handlebars.Options;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-\n-import com.github.jknack.handlebars.Options;\n-\n import se.bjurr.gitchangelog.api.model.Commit;\n import se.bjurr.gitchangelog.api.model.Tag;\n import se.bjurr.gitchangelog.internal.model.Transformer;\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParserTest.java | file path B: src/test/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParserTest.java\n\n@@ -6,28 +6,23 @@ import org.junit.Test;\n \n public class ConventionalCommitParserTest {\n \n-\t@Test\n-\tpublic void testThatDescriptionCanBeParsed() {\n-\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #1)\"))\n-\t\t.isEqualTo(\"a\");\n-\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #123)\"))\n-\t\t.isEqualTo(\"a\");\n-\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs J-1)\"))\n-\t\t.isEqualTo(\"a\");\n-\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs JE-12)\"))\n-\t\t.isEqualTo(\"a\");\n-\t}\n-\t@Test\n-\tpublic void testThatScopeCanBeParsed() {\n-\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(lang): add polish language\"))\n-\t\t.containsOnly(\"lang\");\n-\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(la-ng): add polish language\"))\n-\t\t.containsOnly(\"la-ng\");\n-\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(l): add polish language\"))\n-\t\t.containsOnly(\"l\");\n-\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(123): add polish language\"))\n-\t\t.containsOnly(\"123\");\n-\t}\n+  @Test\n+  public void testThatDescriptionCanBeParsed() {\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #1)\")).isEqualTo(\"a\");\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #123)\")).isEqualTo(\"a\");\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs J-1)\")).isEqualTo(\"a\");\n+    assertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs JE-12)\")).isEqualTo(\"a\");\n+  }\n \n+  @Test\n+  public void testThatScopeCanBeParsed() {\n+    assertThat(ConventionalCommitParser.commitScopes(\"feat(lang): add polish language\"))\n+        .containsOnly(\"lang\");\n+    assertThat(ConventionalCommitParser.commitScopes(\"feat(la-ng): add polish language\"))\n+        .containsOnly(\"la-ng\");\n+    assertThat(ConventionalCommitParser.commitScopes(\"feat(l): add polish language\"))\n+        .containsOnly(\"l\");\n+    assertThat(ConventionalCommitParser.commitScopes(\"feat(123): add polish language\"))\n+        .containsOnly(\"123\");\n+  }\n }\n-\n\n\n###\n\n", "completion": "chore(release): 1.164.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java\n\n@@ -1,12 +1,14 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n-import com.github.jknack.handlebars.Options;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n+\n+import com.github.jknack.handlebars.Options;\n+\n import se.bjurr.gitchangelog.api.model.Commit;\n import se.bjurr.gitchangelog.api.model.Tag;\n import se.bjurr.gitchangelog.internal.model.Transformer;\n\n---\n file path A: None | file path B: src/test/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParserTest.java\n\n@@ -0,0 +1,33 @@\n+package se.bjurr.gitchangelog.internal.semantic;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Test;\n+\n+public class ConventionalCommitParserTest {\n+\n+\t@Test\n+\tpublic void testThatDescriptionCanBeParsed() {\n+\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #1)\"))\n+\t\t.isEqualTo(\"a\");\n+\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs #123)\"))\n+\t\t.isEqualTo(\"a\");\n+\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs J-1)\"))\n+\t\t.isEqualTo(\"a\");\n+\t\tassertThat(ConventionalCommitParser.commitDescription(\"feat: a (refs JE-12)\"))\n+\t\t.isEqualTo(\"a\");\n+\t}\n+\t@Test\n+\tpublic void testThatScopeCanBeParsed() {\n+\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(lang): add polish language\"))\n+\t\t.containsOnly(\"lang\");\n+\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(la-ng): add polish language\"))\n+\t\t.containsOnly(\"la-ng\");\n+\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(l): add polish language\"))\n+\t\t.containsOnly(\"l\");\n+\t\tassertThat(ConventionalCommitParser.commitScopes(\"feat(123): add polish language\"))\n+\t\t.containsOnly(\"123\");\n+\t}\n+\n+}\n+\n\n\n###\n\n", "completion": "chore: test cases (refs #125)"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java\n\n@@ -13,7 +13,7 @@ import se.bjurr.gitchangelog.internal.model.Transformer;\n \n public class ConventionalCommitParser {\n   private static final Pattern CONVENTIONAL_PATTERN =\n-      Pattern.compile(\"^(\\\\w+)(\\\\(([\\\\w:]+)\\\\)?)?(\\\\!?):(.+)\");\n+      Pattern.compile(\"^(\\\\w+)(\\\\(([(\\\\w\\\\-):]+)\\\\)?)?(\\\\!?):(.+)\");\n   private static final Pattern FOOTER_PATTERN =\n       Pattern.compile(\"^(BREAKING[ -]CHANGE|[^ ]+)(((: )|( #))(.+))\");\n \n\n\n###\n\n", "completion": "fix: Allow minus in scope for conventional commits"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Jan 16 09:45:42 CET 2022\n+#Mon Jan 17 16:38:15 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.1\n+version=1.164.2\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.164.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -64,7 +64,7 @@ public class SemanticVersioning {\n     SemanticVersion highest = new SemanticVersion(0, 0, 0);\n     for (final String tag : tags) {\n       final Matcher semanticVersionMatcher =\n-          Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\").matcher(tag.replaceAll(\"[^0-9\\\\.]\", \"\"));\n+          Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\").matcher(tag);\n       if (semanticVersionMatcher.find()) {\n         final String[] dotParts = semanticVersionMatcher.group().split(\"\\\\.\");\n         final SemanticVersion candidate =\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -8,6 +8,7 @@ import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION\n import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP.PATCH;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import org.junit.Before;\n import org.junit.Test;\n@@ -177,4 +178,17 @@ public class SemanticVersioningTest {\n         .isEqualTo(\"1.0.0 -> 1.0.1\");\n     assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(PATCH);\n   }\n+\n+  @Test\n+  public void testTagCleanup() throws Throwable {\n+    assertThat(this.getTagNameFrom(\"whatever1.2.3.4\")).isEqualTo(\"1.2.3\");\n+    assertThat(this.getTagNameFrom(\"1.2.3.4whatever\")).isEqualTo(\"1.2.3\");\n+    assertThat(this.getTagNameFrom(\"1.2.3.4whatever-5.6.7\")).isEqualTo(\"1.2.3\");\n+    assertThat(this.getTagNameFrom(\"whatever-v1-1.2.3\")).isEqualTo(\"1.2.3\");\n+    assertThat(this.getTagNameFrom(\"whatever-v1-1.2.3.4\")).isEqualTo(\"1.2.3\");\n+  }\n+\n+  private String getTagNameFrom(final String tagName) {\n+    return SemanticVersioning.getHighestVersion(Arrays.asList(tagName)).toString();\n+  }\n }\n\n\n###\n\n", "completion": "fix: match first semantic combination"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.164.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.164.1) (2022-01-16)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  not removing issue from message by default ([d0b48](https://github.com/tomasbjerre/git-changelog-lib/commit/d0b48fd6fbbe141))  \n+\n+\n+\n ## [1.164.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.164.0) (2022-01-16)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.164.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Jan 16 09:31:25 CET 2022\n+#Sun Jan 16 09:45:42 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.164.0\n+version=1.164.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.164.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -4,7 +4,7 @@ public final class GitChangelogApiConstants {\n \n   public static final String ZERO_COMMIT = \"0000000000000000000000000000000000000000\";\n   public static final String REF_MASTER = \"master\";\n-  public static final boolean DEFAULT_REMOVE_ISSUE = true;\n+  public static final boolean DEFAULT_REMOVE_ISSUE = false;\n   public static final String DEFAULT_TIMEZONE = \"UTC\";\n   public static final String DEFAULT_DATEFORMAT = \"yyyy-MM-dd HH:mm:ss\";\n   public static final String DEFAULT_IGNORE_COMMITS_REGEXP = \"\";\n\n\n###\n\n", "completion": "fix: not removing issue from message by default"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.164.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.164.0) (2022-01-16)\n+\n+\n+\n+### Features\n+\n+-  defaulting to a changelog based on conventional commits ([ba2d2](https://github.com/tomasbjerre/git-changelog-lib/commit/ba2d2900b776e34))  \n+\n+\n+\n+\n+\n ## [1.163.4](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.4) (2022-01-16)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.164.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Jan 16 08:48:44 CET 2022\n+#Sun Jan 16 09:31:25 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.163.4\n+version=1.164.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.164.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.163.4](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.4) (2022-01-16)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  disable integrations with a boolean useIntegrations ([632fa](https://github.com/tomasbjerre/git-changelog-lib/commit/632fa0b341cf6e8))  \n+\n+\n+\n ## [1.163.3](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.3) (2022-01-05)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.163.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jan 05 15:27:45 CET 2022\n+#Sun Jan 16 08:48:44 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.163.3\n+version=1.163.4\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.163.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.163.3](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.3) (2022-01-05)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  only parse enabled issues ([be84b](https://github.com/tomasbjerre/git-changelog-lib/commit/be84b9b1d3a07d0))  [#123](https://github.com/tomasbjerre/git-changelog-lib/issues/123)  \n+\n+\n+\n ## [1.163.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.2) (2021-12-23)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.163.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Dec 23 18:20:59 CET 2021\n+#Wed Jan 05 15:27:45 CET 2022\n description='Library for parsing report files from static code analysis'\n-version=1.163.2\n+version=1.163.3\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.163.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,23 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.163.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.2) (2021-12-23)\n+\n+\n+\n+\n+\n+\n+\n+### Other changes\n+\n+**Update GitChangelogApiConstants.java**\n+\n+* YYYY is not yyyy. The correct format is yyyy \n+\n+[e7bec](https://github.com/tomasbjerre/git-changelog-lib/commit/e7bec34594338d1) polter05 *2021-12-23 17:09:36*\n+\n+\n ## [1.163.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.1) (2021-12-22)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.163.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Dec 22 18:44:13 CET 2021\n+#Thu Dec 23 18:20:59 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.163.1\n+version=1.163.2\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.163.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,22 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.163.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.1) (2021-12-22)\n+\n+\n+\n+\n+\n+\n+\n+### Other changes\n+\n+**fix #108 error extracting information from jira**\n+\n+\n+[b0e4f](https://github.com/tomasbjerre/git-changelog-lib/commit/b0e4fdc7a3c0b89) Julio Ripoll *2021-12-22 15:54:35*\n+\n+\n ## [1.163.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.0) (2021-12-12)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.163.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Dec 12 16:31:13 CET 2021\n+#Wed Dec 22 18:44:13 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.163.0\n+version=1.163.1\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/rest/RestClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/rest/RestClient.java\n\n@@ -104,7 +104,8 @@ public class RestClient {\n   protected String getResponse(final HttpURLConnection conn) throws Exception {\n     if (mockedRestClient == null) {\n       final InputStream inputStream = conn.getInputStream();\n-      InputStreamReader inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n+      InputStreamReader inputStreamReader =\n+          new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n       BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\n       return bufferedReader.readLine();\n     }\n\n\n###\n\n", "completion": "chore(release): 1.163.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.163.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.163.0) (2021-12-12)\n+\n+\n+\n+### Features\n+\n+-  Add helpers \"ifContainsTypeOtherThan\" and \"ifCommitTypeOtherThan\" ([e6da0](https://github.com/tomasbjerre/git-changelog-lib/commit/e6da09949018589))  \n+\n+\n+\n+\n+\n ## [1.162.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.162.0) (2021-12-03)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.163.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Fri Dec 03 18:19:24 CET 2021\n+#Sun Dec 12 16:31:13 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.162.0\n+version=1.163.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.163.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: README.md | file path B: README.md\n\n@@ -186,6 +186,16 @@ Conditional, renders a block if given `List<Commits>` contains given `type`.\n {{/ifContainsType}}\n ```\n \n+### `ifContainsTypeOtherThan <List<Commit>>`\n+\n+Conditional, renders a block if given `List<Commits>` contains commits that don't match the given `type`.\n+\n+```hbs\n+{{#ifContainsTypeOtherThan commits type=\"fix\"}}\n+  commits contains other types than fix\n+{{/ifContainsTypeOtherThan}}\n+```\n+\n ### `ifContainsBreaking <List<Commit>>`\n \n Conditional, renders a block if given `List<Commits>` contains `breaking` changes.\n@@ -236,6 +246,16 @@ Conditional, renders a block if given `Commit` is of `type`.\n {{/commits}}\n ```\n \n+### `ifCommitType <Commit> type=\"<type>\"`\n+\n+Conditional, renders a block if given `Commit` is of `type`.\n+\n+```hbs\n+{{#commits}}\n+ {{#ifCommitTypeOtherThan . type=\"fix\"}} is not type fix {{/ifCommitTypeOtherThan}}\n+{{/commits}}\n+```\n+\n ### `ifCommitBreaking <Commit>`\n \n Conditional, renders a block if given `Commit` is `breaking`.\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -9,6 +9,7 @@ import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.c\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.commitType;\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.containsBreaking;\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.containsType;\n+import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.containsTypeOtherThan;\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.getDate;\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.getMessageParts;\n import static se.bjurr.gitchangelog.internal.semantic.ConventionalCommitParser.isReleaseTag;\n@@ -80,6 +81,11 @@ public class Helpers {\n         (final List<Commit> commits, final Options options) -> {\n           return conditional(options, containsType(commits, options));\n         });\n+    ALL.put(\n+        \"ifContainsTypeOtherThan\",\n+        (final List<Commit> commits, final Options options) -> {\n+          return conditional(options, containsTypeOtherThan(commits, options));\n+        });\n     ALL.put(\n         \"ifContainsBreaking\",\n         (final List<Commit> commits, final Options options) -> {\n@@ -91,6 +97,11 @@ public class Helpers {\n         (final Commit commit, final Options options) -> {\n           return conditional(options, commitType(commit.getMessage(), options));\n         });\n+    ALL.put(\n+        \"ifCommitTypeOtherThan\",\n+        (final Commit commit, final Options options) -> {\n+          return conditional(options, !commitType(commit.getMessage(), options));\n+        });\n \n     ALL.put(\n         \"ifCommitBreaking\",\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/ConventionalCommitParser.java\n\n@@ -129,6 +129,15 @@ public class ConventionalCommitParser {\n     return false;\n   }\n \n+  public static boolean containsTypeOtherThan(final List<Commit> commits, final Options options) {\n+    for (final Commit commit : commits) {\n+      if (!commitType(commit.getMessage(), options)) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n   public static boolean commitType(final String commitMessage, final Options options) {\n     final String type = options.hash(\"type\").toString();\n     return getType(commitMessage).matches(type);\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -89,6 +89,10 @@ Has paragraphs: {{hash}}\n   commits contains fix\n  {{/ifContainsType}}\n \n+ {{#ifContainsTypeOtherThan commits type=\"fix\"}}\n+  commits contains other types than fix\n+ {{/ifContainsTypeOtherThan}}\n+\n  date: {{tagDate .}} \n  \n {{/tags}}\n@@ -102,6 +106,7 @@ Has paragraphs: {{hash}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n  {{#ifCommitType . type=\"\"}} commit has no type {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix|revert\"}} commit has type fix or revert {{/ifCommitType}}\n+ {{#ifCommitTypeOtherThan . type=\"fix|revert\"}} commit has not type fix or revert {{/ifCommitTypeOtherThan}}\n \n  {{#ifCommitScope . scope=\"utils\"}} is scope utils {{/ifCommitScope}}\n \n@@ -342,6 +347,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commits contains fix\n \n+  commits contains other types than fix\n+\n  date:  \n  \n  tag: name: 1.147.2\n@@ -349,6 +356,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commits contains fix\n \n+  commits contains other types than fix\n+\n  date: 2021-05-24 \n  \n  tag: name: 1.147.1\n@@ -356,6 +365,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commits contains fix\n \n+  commits contains other types than fix\n+\n  date: 2021-05-23 \n  \n \n@@ -379,6 +390,7 @@ second-token-here: value of second token\n  \n  \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -403,6 +415,7 @@ Refs #133\n   is type fix \n  \n   commit has type fix or revert \n+ \n \n  \n \n@@ -422,6 +435,7 @@ BREAKING CHANGE: &#x60;extends&#x60; key in config file is now used for extendin\n  \n  \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -441,6 +455,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -460,6 +475,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -477,6 +493,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -496,6 +513,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n   commit has type fix or revert \n+ \n \n  \n \n@@ -514,6 +532,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n   is type fix \n  \n   commit has type fix or revert \n+ \n \n   is scope utils \n \n@@ -534,6 +553,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n  \n+  commit has not type fix or revert \n \n   is scope utils \n \n@@ -552,6 +572,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commit has no type \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -569,6 +590,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commit has no type \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -586,6 +608,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n   is type fix \n  \n   commit has type fix or revert \n+ \n \n  \n \n@@ -603,6 +626,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commit has no type \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -620,6 +644,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   commit has no type \n  \n+  commit has not type fix or revert \n \n  \n \n@@ -637,6 +662,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n   is type fix \n  \n   commit has type fix or revert \n+ \n \n  \n \n\n---\n file path A: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -87,6 +87,10 @@ Has paragraphs: {{hash}}\n   commits contains fix\n  {{/ifContainsType}}\n \n+ {{#ifContainsTypeOtherThan commits type=\"fix\"}}\n+  commits contains other types than fix\n+ {{/ifContainsTypeOtherThan}}\n+\n  date: {{tagDate .}} \n  \n {{/tags}}\n@@ -100,6 +104,7 @@ Has paragraphs: {{hash}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n  {{#ifCommitType . type=\"\"}} commit has no type {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix|revert\"}} commit has type fix or revert {{/ifCommitType}}\n+ {{#ifCommitTypeOtherThan . type=\"fix|revert\"}} commit has not type fix or revert {{/ifCommitTypeOtherThan}}\n \n  {{#ifCommitScope . scope=\"utils\"}} is scope utils {{/ifCommitScope}}\n \n\n\n###\n\n", "completion": "feat: Add helpers \"ifContainsTypeOtherThan\" and \"ifCommitTypeOtherThan\""}
{"prompt": " file path A: .circleci/config.yml | file path B: None\n\n@@ -1,26 +0,0 @@\n-version: 2\n-shared: &shared\n-  steps:\n-    - run: java -version\n-    - checkout\n-    - run: ./gradlew build\n-jobs:\n-  jdk8:\n-    docker:\n-      - image: circleci/openjdk:8-jdk-stretch\n-    <<: *shared\n-  jdk11:\n-    docker:\n-      - image: circleci/openjdk:11-jdk-stretch\n-    <<: *shared\n-  jdk17:\n-    docker:\n-      - image: cimg/openjdk:17.0\n-    <<: *shared\n-workflows:\n-  version: 2\n-  work:\n-    jobs:\n-      - jdk8\n-      - jdk11\n-#      - jdk17\n\n---\n file path A: .github/FUNDING.yml | file path B: None\n\n@@ -1 +0,0 @@\n-github: [tomasbjerre]\n\n---\n file path A: None | file path B: .github/workflows/gradle-ci.yml\n\n@@ -0,0 +1,7 @@\n+name: Call Gradle CI\n+\n+on: [push, pull_request]\n+\n+jobs:\n+  call-workflow:\n+    uses: tomasbjerre/.github/.github/workflows/gradle-ci.yml@master\n\n\n###\n\n", "completion": "ci: github actions"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,22 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.162.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.162.0) (2021-12-03)\n+\n+\n+\n+\n+\n+\n+\n+### Other changes\n+\n+**feat support Bearer authorization for JIRA**\n+\n+\n+[f7abd](https://github.com/tomasbjerre/git-changelog-lib/commit/f7abd7f4a17b035) Lum\u00edr N\u00e1vrat *2021-12-01 19:44:32*\n+\n+\n ## [1.161.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.161.0) (2021-11-30)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.162.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Nov 30 20:35:02 CET 2021\n+#Fri Dec 03 18:19:24 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.161.0\n+version=1.162.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.162.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,25 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.161.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.161.0) (2021-11-30)\n+\n+\n+\n+### Features\n+\n+-  bearer ([0e0fb](https://github.com/tomasbjerre/git-changelog-lib/commit/0e0fb521d7d7aa3))  [#111](https://github.com/tomasbjerre/git-changelog-lib/issues/111)  \n+\n+\n+\n+\n+### Other changes\n+\n+**Add .circleci/config.yml**\n+\n+\n+[9cb1f](https://github.com/tomasbjerre/git-changelog-lib/commit/9cb1ff18c3806f8) Tomas Bjerre *2021-11-21 11:44:05*\n+\n+\n ## [1.160.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.160.0) (2021-11-21)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.161.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Nov 21 09:36:10 CET 2021\n+#Tue Nov 30 20:35:02 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.160.0\n+version=1.161.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.161.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: _config.yml | file path B: None\n\n@@ -1 +0,0 @@\n-theme: jekyll-theme-slate\n\\ No newline at end of file\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/rest/RestClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/rest/RestClient.java\n\n@@ -20,7 +20,7 @@ public class RestClient {\n   private static RestClient mockedRestClient;\n   private final Map<String, Optional<String>> urlCache = new ConcurrentHashMap<>();\n   private String basicAuthString;\n-\n+  private String bearer;\n   private Map<String, String> headers;\n \n   public RestClient() {}\n@@ -40,6 +40,11 @@ public class RestClient {\n     return this;\n   }\n \n+  public RestClient withBearer(final String bearer) {\n+    this.bearer = bearer;\n+    return this;\n+  }\n+\n   public RestClient withHeaders(final Map<String, String> headers) {\n     this.headers = headers;\n     return this;\n@@ -71,7 +76,9 @@ public class RestClient {\n           conn.setRequestProperty(entry.getKey(), entry.getValue());\n         }\n       }\n-      if (this.basicAuthString != null) {\n+      if (this.bearer != null) {\n+        conn.setRequestProperty(\"Authorization\", \"Bearer \" + this.bearer);\n+      } else if (this.basicAuthString != null) {\n         conn.setRequestProperty(\"Authorization\", \"Basic \" + this.basicAuthString);\n       }\n       return Optional.of(this.getResponse(conn));\n\n\n###\n\n", "completion": "feat: bearer (refs #111)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.160.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.160.0) (2021-11-21)\n+\n+\n+\n+### Features\n+\n+-  Add support for including partials in mustache templates ([26f86](https://github.com/tomasbjerre/git-changelog-lib/commit/26f86a816904ccc))  \n+\n+\n+\n+\n+\n ## [1.159.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.159.0) (2021-11-16)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.160.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Nov 16 17:47:00 CET 2021\n+#Sun Nov 21 09:36:10 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.159.0\n+version=1.160.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.160.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -12,6 +12,8 @@ import com.github.jknack.handlebars.Context;\n import com.github.jknack.handlebars.Handlebars;\n import com.github.jknack.handlebars.Helper;\n import com.github.jknack.handlebars.Template;\n+import com.github.jknack.handlebars.io.FileTemplateLoader;\n+\n import java.io.File;\n import java.io.IOException;\n import java.io.StringWriter;\n@@ -98,6 +100,11 @@ public class GitChangelogApi {\n   public void render(final Writer writer) throws GitChangelogRepositoryException {\n     Template template = null;\n     final String templateString = this.getTemplateString();\n+\n+    if (this.settings.getTemplateBaseDir() != null) {\n+      this.handlebars.with(new FileTemplateLoader(this.settings.getTemplateBaseDir(), this.settings.getTemplateSuffix()));\n+    }\n+\n     try {\n       template = this.handlebars.compileInline(templateString);\n     } catch (final IOException e) {\n@@ -550,6 +557,22 @@ public class GitChangelogApi {\n     return this;\n   }\n \n+  /**\n+   * Path to the base directory for template partial files\n+   */\n+  public GitChangelogApi withTemplateBaseDir(final String templateBaseDir) {\n+    this.settings.setTemplateBaseDir(templateBaseDir);\n+    return this;\n+  }\n+\n+  /**\n+   * Suffix of the template partial files\n+   */\n+  public GitChangelogApi withTemplateSuffix(final String templateSuffix) {\n+    this.settings.setTemplateSuffix(templateSuffix);\n+    return this;\n+  }\n+\n   /**\n    * When date of commits are translated to a string, this timezone is used.<br>\n    * <code>UTC</code>\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java\n\n@@ -93,6 +93,15 @@ public class Settings implements Serializable {\n    * with the context of {@link Changelog}.\n    */\n   private String templatePath;\n+  /**\n+   * Path to the base directory for template partial files. If not null, handlebars will be\n+   * configured with a FileTemplateLoader with this as base directory.\n+   */\n+  private String templateBaseDir;\n+  /**\n+   * The filename suffix of template partial files. Requires \"templateBaseDir\" to be set.\n+   */\n+  private String templateSuffix;\n   /**\n    * Your tags may look something like <code>git-changelog-maven-plugin-1.6</code>. But in the\n    * changelog you just want <code>1.6</code>. With this regular expression, the numbering can be\n@@ -369,11 +378,27 @@ public class Settings implements Serializable {\n     return ofNullable(this.templatePath).orElse(\"changelog.mustache\");\n   }\n \n-  public void setTemplatePath(final String templatePath) {\n+public void setTemplatePath(final String templatePath) {\n     this.templatePath = templatePath;\n   }\n \n-  public String getReadableTagName() {\n+public String getTemplateBaseDir() {\n+\treturn templateBaseDir;\n+}\n+\n+public void setTemplateBaseDir(String templateBaseDir) {\n+\tthis.templateBaseDir = templateBaseDir;\n+}\n+\n+  public String getTemplateSuffix() {\n+\treturn templateSuffix;\n+}\n+\n+public void setTemplateSuffix(String templateSuffix) {\n+\tthis.templateSuffix = templateSuffix;\n+}\n+\n+public String getReadableTagName() {\n     return ofNullable(this.readableTagName).orElse(DEFAULT_READABLE_TAG_NAME);\n   }\n \n@@ -411,6 +436,7 @@ public class Settings implements Serializable {\n     s.setFromCommit(ZERO_COMMIT);\n     s.setToRef(\"refs/heads/master\");\n     s.setIgnoreCommitsIfMessageMatches(\"^Merge.*\");\n+    s.setTemplateSuffix(\".hbs\");\n     s.setReadableTagName(\"/([^/]+?)$\");\n     s.setDateFormat(\"YYYY-MM-dd HH:mm:ss\");\n     s.setUntaggedName(\"No tag\");\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -299,4 +299,21 @@ public class GitChangelogApiTest {\n     System.out.println(path.toFile().getAbsolutePath());\n     assertThat(path.toFile()).exists().isFile();\n   }\n+\n+  @Test\n+  public void testThatPartialsCanBeIncluded() throws Exception {\n+    final String templatePath = \"templatetest/testThatPartialsCanBeIncluded.mustache\";\n+\n+    final Path path = Paths.get(\"build\", \"testdirtocreate\", \"testThatPartialsCanBeIncluded.md\");\n+    gitChangelogApiBuilder() //\n+        .withFromCommit(\"aa1fd33\") //\n+        .withToCommit(\"4c6e078\") //\n+        .withTemplatePath(templatePath) //\n+        .withTemplateBaseDir(\"./src/test/resources/templatetest\") //\n+        .withTemplateSuffix(\".partial\") //\n+        .toFile(path.toFile());\n+\n+    System.out.println(path.toFile().getAbsolutePath());\n+    assertThat(path.toFile()).exists().isFile();\n+  }\n }\n\n---\n file path A: None | file path B: src/test/resources/templatetest/commit.partial\n\n@@ -0,0 +1,4 @@\n+## {{authorName}} - {{commitTime}}\n+[{{hashFull}}](https://server/{{hash}})\n+\n+{{{message}}}\n\n---\n file path A: None | file path B: src/test/resources/templatetest/testThatPartialsCanBeIncluded.mustache\n\n@@ -0,0 +1,7 @@\n+# Git Changelog changelog\n+\n+Changelog of Git Changelog.\n+\n+{{#commits}}\n+{{> commit}}\n+{{/commits}}\n\n\n###\n\n", "completion": "feat: Add support for including partials in mustache templates"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,19 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.159.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.159.0) (2021-11-16)\n+\n+\n+\n+### Features\n+\n+-  adjustments after merge ([00ce6](https://github.com/tomasbjerre/git-changelog-lib/commit/00ce6b5c7be6302))  [#106](https://github.com/tomasbjerre/git-changelog-lib/issues/106)  \n+-  Redmine Support ([afb92](https://github.com/tomasbjerre/git-changelog-lib/commit/afb929cae874e30))  \n+\n+\n+\n+\n+\n ## [1.158.4](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.4) (2021-10-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.159.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 17:23:19 CEST 2021\n+#Tue Nov 16 17:47:00 CET 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.4\n+version=1.159.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.159.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.158.4](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.4) (2021-10-17)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  reverting toString() of SemanticVersion ([f2939](https://github.com/tomasbjerre/git-changelog-lib/commit/f293966f47eb041))  \n+\n+\n+\n ## [1.158.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.2) (2021-10-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.158.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 17:08:34 CEST 2021\n+#Sun Oct 17 17:23:19 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.3\n+version=1.158.4\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.158.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -60,6 +60,6 @@ public class SemanticVersion implements Serializable {\n \n   @Override\n   public String toString() {\n-    return this.major + \".\" + this.minor + \".\" + this.patch + \" (\" + this.versionStep + \")\";\n+    return this.major + \".\" + this.minor + \".\" + this.patch;\n   }\n }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -2,6 +2,10 @@ package se.bjurr.gitchangelog.semantic;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static se.bjurr.gitchangelog.api.GitChangelogApi.gitChangelogApiBuilder;\n+import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP.MAJOR;\n+import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP.MINOR;\n+import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP.NONE;\n+import static se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP.PATCH;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -10,6 +14,7 @@ import org.junit.Test;\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP;\n \n public class SemanticVersioningTest {\n \n@@ -40,14 +45,16 @@ public class SemanticVersioningTest {\n             .withSemanticMajorVersionPattern(\"breaking:.*\") //\n             .withSemanticMinorVersionPattern(\"update:.*\");\n \n-    assertThat(builder1.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5 (PATCH)\");\n+    assertThat(builder1.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5\");\n+    assertThat(builder1.getNextSemanticVersion().getVersionStep()).isEqualTo(PATCH);\n \n     final GitChangelogApi builder2 =\n         gitChangelogApiBuilder() //\n             .withToCommit(\"7c1c366\") //\n             .withSemanticMajorVersionPattern(\"breaking:.*\") //\n             .withSemanticMinorVersionPattern(\"update:.*\");\n-    assertThat(builder2.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4 (NONE)\");\n+    assertThat(builder2.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4\");\n+    assertThat(builder2.getNextSemanticVersion().getVersionStep()).isEqualTo(VERSION_STEP.PATCH);\n   }\n \n   @Test\n@@ -58,7 +65,8 @@ public class SemanticVersioningTest {\n             .withSemanticMajorVersionPattern(\"^[Bb]reaking.*\")\n             .withSemanticMinorVersionPattern(\"^[Ff]eat.*\")\n             .getNextSemanticVersion();\n-    assertThat(nextSemanticVersion.toString()).isEqualTo(\"1.155.1 (PATCH)\");\n+    assertThat(nextSemanticVersion.toString()).isEqualTo(\"1.155.1\");\n+    assertThat(nextSemanticVersion.getVersionStep()).isEqualTo(PATCH);\n   }\n \n   @Test\n@@ -68,7 +76,8 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n+        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(MAJOR);\n   }\n \n   @Test\n@@ -78,7 +87,8 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n+        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(MAJOR);\n   }\n \n   @Test\n@@ -87,8 +97,10 @@ public class SemanticVersioningTest {\n     this.commits.add(\"feat: whatever\\n\\nBREAKING CHANGE: this is a text\");\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n-    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n+    final SemanticVersion nextVersion = this.sut.getNextVersion(highestVersion);\n+    assertThat(highestVersion + \" -> \" + nextVersion) //\n+        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+    assertThat(nextVersion.getVersionStep()).isEqualTo(MAJOR);\n   }\n \n   @Test\n@@ -98,7 +110,8 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.1.0 (MINOR)\");\n+        .isEqualTo(\"1.0.0 -> 1.1.0\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(MINOR);\n   }\n \n   @Test\n@@ -108,7 +121,8 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n+        .isEqualTo(\"1.0.0 -> 1.0.1\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(PATCH);\n   }\n \n   @Test\n@@ -117,7 +131,8 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n+        .isEqualTo(\"1.0.0 -> 1.0.1\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(PATCH);\n   }\n \n   @Test\n@@ -129,7 +144,8 @@ public class SemanticVersioningTest {\n             this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.0.0 (NONE)\");\n+        .isEqualTo(\"1.0.0 -> 1.0.0\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(NONE);\n   }\n \n   @Test\n@@ -143,7 +159,8 @@ public class SemanticVersioningTest {\n         new SemanticVersioning(\n             this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.0.0 (NONE)\");\n+        .isEqualTo(\"1.0.0 -> 1.0.0\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(NONE);\n   }\n \n   @Test\n@@ -157,6 +174,7 @@ public class SemanticVersioningTest {\n         new SemanticVersioning(\n             this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n+        .isEqualTo(\"1.0.0 -> 1.0.1\");\n+    assertThat(this.sut.getNextVersion(highestVersion).getVersionStep()).isEqualTo(PATCH);\n   }\n }\n\n\n###\n\n", "completion": "fix: reverting toString() of SemanticVersion"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 17:06:21 CEST 2021\n+#Sun Oct 17 17:08:34 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.2\n+version=1.158.3\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.158.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,15 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.158.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.2) (2021-10-17)\n+\n+\n+\n+\n+\n+\n+\n+\n ## [1.158.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.1) (2021-10-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.158.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 16:52:12 CEST 2021\n+#Sun Oct 17 17:06:21 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.1\n+version=1.158.2\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -5,10 +5,8 @@ import static se.bjurr.gitchangelog.api.GitChangelogApi.gitChangelogApiBuilder;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.junit.Before;\n import org.junit.Test;\n-\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n@@ -127,8 +125,8 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.patchPattern = \"fix:.*\";\n     this.sut =\n-            new SemanticVersioning(\n-                this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n+        new SemanticVersioning(\n+            this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n         .isEqualTo(\"1.0.0 (NONE) -> 1.0.0 (NONE)\");\n\n\n###\n\n", "completion": "chore(release): 1.158.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -5,8 +5,10 @@ import static se.bjurr.gitchangelog.api.GitChangelogApi.gitChangelogApiBuilder;\n \n import java.util.ArrayList;\n import java.util.List;\n+\n import org.junit.Before;\n import org.junit.Test;\n+\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n@@ -111,6 +113,27 @@ public class SemanticVersioningTest {\n         .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n   }\n \n+  @Test\n+  public void testPatchStepWithNoNewCommitsAndNoPattern() throws Throwable {\n+    this.tags.add(\"v1.0.0\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n+  }\n+\n+  @Test\n+  public void testPatchStepWithNoNewCommitsAndPattern() throws Throwable {\n+    this.tags.add(\"v1.0.0\");\n+    this.patchPattern = \"fix:.*\";\n+    this.sut =\n+            new SemanticVersioning(\n+                this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.0.0 (NONE)\");\n+  }\n+\n   @Test\n   public void testPatchStepWithPatternNotMatching() throws Throwable {\n     this.tags.add(\"v1.0.0\");\n\n\n###\n\n", "completion": "chore: tests"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,19 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.158.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.1) (2021-10-17)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  adding method to get version ([d6914](https://github.com/tomasbjerre/git-changelog-lib/commit/d6914e397988d7d))  [#104](https://github.com/tomasbjerre/git-changelog-lib/issues/104)  \n+-  adding missing patch method in API ([f8eb5](https://github.com/tomasbjerre/git-changelog-lib/commit/f8eb51fd303b32f))  [#104](https://github.com/tomasbjerre/git-changelog-lib/issues/104)  \n+\n+\n+\n ## [1.158.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.0) (2021-10-17)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.158.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 16:39:05 CEST 2021\n+#Sun Oct 17 16:52:12 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.1 (PATCH)\n+version=1.158.1\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -2,7 +2,6 @@ package se.bjurr.gitchangelog.internal.semantic;\n \n import java.io.Serializable;\n import java.util.Optional;\n-\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP;\n \n public class SemanticVersion implements Serializable {\n@@ -56,7 +55,7 @@ public class SemanticVersion implements Serializable {\n   }\n \n   public String getVersion() {\n-\t  return this.major + \".\" + this.minor + \".\" + this.patch;\n+    return this.major + \".\" + this.minor + \".\" + this.patch;\n   }\n \n   @Override\n\n\n###\n\n", "completion": "chore(release): 1.158.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -2,6 +2,7 @@ package se.bjurr.gitchangelog.internal.semantic;\n \n import java.io.Serializable;\n import java.util.Optional;\n+\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP;\n \n public class SemanticVersion implements Serializable {\n@@ -54,6 +55,10 @@ public class SemanticVersion implements Serializable {\n     return this.versionStep;\n   }\n \n+  public String getVersion() {\n+\t  return this.major + \".\" + this.minor + \".\" + this.patch;\n+  }\n+\n   @Override\n   public String toString() {\n     return this.major + \".\" + this.minor + \".\" + this.patch + \" (\" + this.versionStep + \")\";\n\n\n###\n\n", "completion": "fix: adding method to get version (refs #104)"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Sun Oct 17 09:04:37 CEST 2021\n+#Sun Oct 17 16:39:05 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.158.0\n+version=1.158.1 (PATCH)\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.158.1 (PATCH) [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -225,6 +225,13 @@ public class GitChangelogApi {\n     return this;\n   }\n \n+  /** Will be used to determine next semantic version. */\n+  public GitChangelogApi withSemanticPatchVersionPattern(final String patch)\n+      throws GitChangelogRepositoryException {\n+    this.settings.setSemanticPatchPattern(patch);\n+    return this;\n+  }\n+\n   /**\n    * Registers (Javscript) Handlebars helper to use in template.\n    *\n\n\n###\n\n", "completion": "fix: adding missing patch method in API (refs #104)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.158.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.158.0) (2021-10-17)\n+\n+\n+\n+### Features\n+\n+-  only step patch if matching pattern ([7557e](https://github.com/tomasbjerre/git-changelog-lib/commit/7557e612dd5db22))  [#104](https://github.com/tomasbjerre/git-changelog-lib/issues/104)  \n+\n+\n+\n+\n+\n ## [1.157.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.157.2) (2021-10-06)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.158.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Oct 06 18:08:51 CEST 2021\n+#Sun Oct 17 09:04:37 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.157.2\n+version=1.158.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.158.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -188,8 +188,10 @@ public class GitChangelogApi {\n     final List<String> commits = this.getCommitMessages(changelog);\n     final String majorVersionPattern = this.settings.getSemanticMajorPattern().orElse(null);\n     final String minorVersionPattern = this.settings.getSemanticMinorPattern();\n+    final String patchVersionPattern = this.settings.getSemanticPatchPattern();\n     final SemanticVersioning semanticVersioning =\n-        new SemanticVersioning(tags, commits, majorVersionPattern, minorVersionPattern);\n+        new SemanticVersioning(\n+            tags, commits, majorVersionPattern, minorVersionPattern, patchVersionPattern);\n     return semanticVersioning.getNextVersion(highestSemanticVersion);\n   }\n \n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -15,6 +15,7 @@ public final class GitChangelogApiConstants {\n   public static final String DEFAULT_GITLAB_ISSUE_PATTERN = \"#([0-9]+)\";\n   public static final String DEFAULT_JIRA_ISSUE_PATTEN = \"\\\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\\\b\";\n   public static final String DEFAULT_MINOR_PATTERN = \"^[Ff]eat.*\";\n+  public static final String DEFAULT_PATCH_PATTERN = null;\n \n   private GitChangelogApiConstants() {}\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -2,6 +2,7 @@ package se.bjurr.gitchangelog.internal.semantic;\n \n import java.io.Serializable;\n import java.util.Optional;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning.VERSION_STEP;\n \n public class SemanticVersion implements Serializable {\n   private static final long serialVersionUID = -7875655375353325189L;\n@@ -9,11 +10,19 @@ public class SemanticVersion implements Serializable {\n   private final int minor;\n   private final int major;\n   private String tag;\n+  private VERSION_STEP versionStep;\n \n   public SemanticVersion(final int major, final int minor, final int patch) {\n     this.major = major;\n     this.minor = minor;\n     this.patch = patch;\n+    this.versionStep = VERSION_STEP.NONE;\n+  }\n+\n+  public SemanticVersion(\n+      final int major, final int minor, final int patch, final VERSION_STEP versionStep) {\n+    this(major, minor, patch);\n+    this.versionStep = versionStep;\n   }\n \n   public int getMajor() {\n@@ -28,11 +37,6 @@ public class SemanticVersion implements Serializable {\n     return this.patch;\n   }\n \n-  @Override\n-  public String toString() {\n-    return this.major + \".\" + this.minor + \".\" + this.patch;\n-  }\n-\n   public void setTag(final String tag) {\n     this.tag = tag;\n   }\n@@ -41,4 +45,17 @@ public class SemanticVersion implements Serializable {\n   public Optional<String> findTag() {\n     return Optional.ofNullable(this.tag);\n   }\n+\n+  /**\n+   * When determining next semantic version, the version may not have been stepped. And his will be\n+   * {@link VERSION_STEP.NONE}.\n+   */\n+  public VERSION_STEP getVersionStep() {\n+    return this.versionStep;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return this.major + \".\" + this.minor + \".\" + this.patch + \" (\" + this.versionStep + \")\";\n+  }\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -9,34 +9,55 @@ public class SemanticVersioning {\n   public enum VERSION_STEP {\n     MAJOR,\n     MINOR,\n-    PATCH\n+    PATCH,\n+    /** Was not stepped. Given patch pattern did not match. */\n+    NONE\n   }\n \n   private final List<String> commits;\n-  private Pattern majorPattern;\n+  private final Pattern majorPattern;\n   private final Pattern minorPattern;\n+  private final Pattern patchPattern;\n \n   public SemanticVersioning(\n       final List<String> tags,\n       final List<String> commits,\n       final String majorPattern,\n-      final String minorPattern) {\n+      final String minorPattern,\n+      final String patchPattern) {\n     this.commits = commits;\n     if (majorPattern != null) {\n       this.majorPattern = Pattern.compile(majorPattern);\n+    } else {\n+      this.majorPattern = null;\n     }\n     this.minorPattern = Pattern.compile(minorPattern);\n+    if (patchPattern != null) {\n+      this.patchPattern = Pattern.compile(patchPattern);\n+    } else {\n+      this.patchPattern = null;\n+    }\n   }\n \n   public SemanticVersion getNextVersion(final SemanticVersion highestVersion) {\n     final VERSION_STEP versionStep = this.getVersionStep();\n     if (versionStep == VERSION_STEP.MAJOR) {\n-      return new SemanticVersion(highestVersion.getMajor() + 1, 0, 0);\n+      return new SemanticVersion(highestVersion.getMajor() + 1, 0, 0, versionStep);\n     } else if (versionStep == VERSION_STEP.MINOR) {\n-      return new SemanticVersion(highestVersion.getMajor(), highestVersion.getMinor() + 1, 0);\n+      return new SemanticVersion(\n+          highestVersion.getMajor(), highestVersion.getMinor() + 1, 0, versionStep);\n+    } else if (versionStep == VERSION_STEP.PATCH) {\n+      return new SemanticVersion(\n+          highestVersion.getMajor(),\n+          highestVersion.getMinor(),\n+          highestVersion.getPatch() + 1,\n+          versionStep);\n     }\n     return new SemanticVersion(\n-        highestVersion.getMajor(), highestVersion.getMinor(), highestVersion.getPatch() + 1);\n+        highestVersion.getMajor(),\n+        highestVersion.getMinor(),\n+        highestVersion.getPatch(),\n+        versionStep);\n   }\n \n   public static SemanticVersion getHighestVersion(final List<String> tags) {\n@@ -73,7 +94,8 @@ public class SemanticVersioning {\n   }\n \n   private VERSION_STEP getVersionStep() {\n-    VERSION_STEP versionStep = VERSION_STEP.PATCH;\n+    final boolean patchVersionPatternGiven = this.patchPattern != null;\n+    VERSION_STEP versionStep = patchVersionPatternGiven ? VERSION_STEP.NONE : VERSION_STEP.PATCH;\n     for (final String commit : this.commits) {\n       final boolean majorPatternMatches =\n           this.majorPattern != null && this.majorPattern.matcher(commit).find();\n@@ -81,6 +103,12 @@ public class SemanticVersioning {\n         return VERSION_STEP.MAJOR;\n       } else if (this.minorPattern.matcher(commit).find()) {\n         versionStep = VERSION_STEP.MINOR;\n+      } else {\n+        if (versionStep == VERSION_STEP.NONE\n+            && patchVersionPatternGiven\n+            && this.patchPattern.matcher(commit).find()) {\n+          versionStep = VERSION_STEP.PATCH;\n+        }\n       }\n     }\n     return versionStep;\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java\n\n@@ -9,6 +9,7 @@ import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_IGNORE_\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_JIRA_ISSUE_PATTEN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_MINOR_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_NO_ISSUE_NAME;\n+import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_PATCH_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_READABLE_TAG_NAME;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_REMOVE_ISSUE;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_TIMEZONE;\n@@ -190,6 +191,9 @@ public class Settings implements Serializable {\n   /** Regular expression to use when determining next semantic version based on commits. */\n   private String semanticMinorPattern = null;\n \n+  /** Regular expression to use when determining next semantic version based on commits. */\n+  private String semanticPatchPattern;\n+\n   public String getSubDirFilter() {\n     return ofNullable(this.subDirFilter).orElse(\"\");\n   }\n@@ -514,6 +518,14 @@ public class Settings implements Serializable {\n     this.semanticMinorPattern = this.isRegexp(semanticMinorPattern, \"semanticMinorPattern\");\n   }\n \n+  public String getSemanticPatchPattern() {\n+    return ofNullable(this.semanticPatchPattern).orElse(DEFAULT_PATCH_PATTERN);\n+  }\n+\n+  public void setSemanticPatchPattern(final String semanticPatchPattern) {\n+    this.semanticPatchPattern = this.isRegexp(semanticPatchPattern, \"semanticPatchPattern\");\n+  }\n+\n   private String isRegexp(final String pattern, final String string) {\n     try {\n       Pattern.compile(pattern);\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -17,6 +17,7 @@ public class SemanticVersioningTest {\n   private List<String> commits;\n   private String majorPattern;\n   private String minorPattern;\n+  private String patchPattern;\n   private SemanticVersioning sut;\n \n   @Before\n@@ -25,8 +26,10 @@ public class SemanticVersioningTest {\n     this.commits = new ArrayList<>();\n     this.majorPattern = null;\n     this.minorPattern = \"[Uu]pdate:.*\";\n+    this.patchPattern = null;\n     this.sut =\n-        new SemanticVersioning(this.tags, this.commits, this.majorPattern, this.minorPattern);\n+        new SemanticVersioning(\n+            this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n   }\n \n   @Test\n@@ -37,14 +40,14 @@ public class SemanticVersioningTest {\n             .withSemanticMajorVersionPattern(\"breaking:.*\") //\n             .withSemanticMinorVersionPattern(\"update:.*\");\n \n-    assertThat(builder1.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5\");\n+    assertThat(builder1.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5 (PATCH)\");\n \n     final GitChangelogApi builder2 =\n         gitChangelogApiBuilder() //\n             .withToCommit(\"7c1c366\") //\n             .withSemanticMajorVersionPattern(\"breaking:.*\") //\n             .withSemanticMinorVersionPattern(\"update:.*\");\n-    assertThat(builder2.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4\");\n+    assertThat(builder2.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4 (NONE)\");\n   }\n \n   @Test\n@@ -55,7 +58,7 @@ public class SemanticVersioningTest {\n             .withSemanticMajorVersionPattern(\"^[Bb]reaking.*\")\n             .withSemanticMinorVersionPattern(\"^[Ff]eat.*\")\n             .getNextSemanticVersion();\n-    assertThat(nextSemanticVersion.toString()).isEqualTo(\"1.155.1\");\n+    assertThat(nextSemanticVersion.toString()).isEqualTo(\"1.155.1 (PATCH)\");\n   }\n \n   @Test\n@@ -65,7 +68,7 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n   }\n \n   @Test\n@@ -75,7 +78,7 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n   }\n \n   @Test\n@@ -85,7 +88,7 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 -> 2.0.0\");\n+        .isEqualTo(\"1.0.0 (NONE) -> 2.0.0 (MAJOR)\");\n   }\n \n   @Test\n@@ -95,7 +98,7 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 -> 1.1.0\");\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.1.0 (MINOR)\");\n   }\n \n   @Test\n@@ -105,6 +108,34 @@ public class SemanticVersioningTest {\n \n     final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n-        .isEqualTo(\"1.0.0 -> 1.0.1\");\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n+  }\n+\n+  @Test\n+  public void testPatchStepWithPatternNotMatching() throws Throwable {\n+    this.tags.add(\"v1.0.0\");\n+    this.commits.add(\"chore: whatever\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    this.patchPattern = \"fix:.*\";\n+    this.sut =\n+        new SemanticVersioning(\n+            this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.0.0 (NONE)\");\n+  }\n+\n+  @Test\n+  public void testPatchStepWithPatternMatching() throws Throwable {\n+    this.tags.add(\"v1.0.0\");\n+    this.commits.add(\"fix: whatever\");\n+\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    this.patchPattern = \"fix:.*\";\n+    this.sut =\n+        new SemanticVersioning(\n+            this.tags, this.commits, this.majorPattern, this.minorPattern, this.patchPattern);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n+        .isEqualTo(\"1.0.0 (NONE) -> 1.0.1 (PATCH)\");\n   }\n }\n\n\n###\n\n", "completion": "feat: only step patch if matching pattern (refs #104)"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.157.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.157.2) (2021-10-06)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  SemanticVersion implements Serializable ([615c4](https://github.com/tomasbjerre/git-changelog-lib/commit/615c4c957f1b47a))  \n+\n+\n+\n ## [1.157.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.157.1) (2021-07-15)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.157.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jul 15 08:21:35 CEST 2021\n+#Wed Oct 06 18:08:51 CEST 2021\n description='Library for parsing report files from static code analysis'\n version=1.157.2\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.157.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n #Thu Jul 15 08:21:35 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.157.1\n+version=1.157.2\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -1,8 +1,10 @@\n package se.bjurr.gitchangelog.internal.semantic;\n \n+import java.io.Serializable;\n import java.util.Optional;\n \n-public class SemanticVersion {\n+public class SemanticVersion implements Serializable {\n+  private static final long serialVersionUID = -7875655375353325189L;\n   private final int patch;\n   private final int minor;\n   private final int major;\n\n\n###\n\n", "completion": "fix: SemanticVersion implements Serializable"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,15 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.157.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.157.1) (2021-07-15)\n+\n+\n+\n+\n+\n+\n+\n+\n ## [1.157.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.157.0) (2021-07-15)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.157.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jul 15 08:09:03 CEST 2021\n+#Thu Jul 15 08:21:35 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.157.0\n+version=1.157.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.157.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -187,7 +187,7 @@ public class GitChangelogApi {\n     final List<String> tags = this.getTagsAsStrings(changelog);\n     final List<String> commits = this.getCommitMessages(changelog);\n     final String majorVersionPattern = this.settings.getSemanticMajorPattern().orElse(null);\n-    final String minorVersionPattern = this.settings.getSemanticMinorPattern().orElse(null);\n+    final String minorVersionPattern = this.settings.getSemanticMinorPattern();\n     final SemanticVersioning semanticVersioning =\n         new SemanticVersioning(tags, commits, majorVersionPattern, minorVersionPattern);\n     return semanticVersioning.getNextVersion(highestSemanticVersion);\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -14,6 +14,7 @@ public final class GitChangelogApiConstants {\n   public static final String DEFAULT_GITHUB_ISSUE_PATTERN = \"#([0-9]+)\";\n   public static final String DEFAULT_GITLAB_ISSUE_PATTERN = \"#([0-9]+)\";\n   public static final String DEFAULT_JIRA_ISSUE_PATTEN = \"\\\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\\\b\";\n+  public static final String DEFAULT_MINOR_PATTERN = \"^[Ff]eat.*\";\n \n   private GitChangelogApiConstants() {}\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java\n\n@@ -7,6 +7,7 @@ import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_GITHUB_\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_GITLAB_ISSUE_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_IGNORE_COMMITS_REGEXP;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_JIRA_ISSUE_PATTEN;\n+import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_MINOR_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_NO_ISSUE_NAME;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_READABLE_TAG_NAME;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_REMOVE_ISSUE;\n@@ -187,7 +188,7 @@ public class Settings implements Serializable {\n   private String semanticMajorPattern = null;\n \n   /** Regular expression to use when determining next semantic version based on commits. */\n-  private String semanticMinorPattern = \"^[Ff]eat.*\";\n+  private String semanticMinorPattern = null;\n \n   public String getSubDirFilter() {\n     return ofNullable(this.subDirFilter).orElse(\"\");\n@@ -505,8 +506,8 @@ public class Settings implements Serializable {\n     this.semanticMajorPattern = this.isRegexp(semanticMajorPattern, \"semanticMajorPattern\");\n   }\n \n-  public Optional<String> getSemanticMinorPattern() {\n-    return ofNullable(this.semanticMinorPattern);\n+  public String getSemanticMinorPattern() {\n+    return ofNullable(this.semanticMinorPattern).orElse(DEFAULT_MINOR_PATTERN);\n   }\n \n   public void setSemanticMinorPattern(final String semanticMinorPattern) {\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt\n\n@@ -23,7 +23,6 @@ settings:\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n   \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\",\n   \"subDirFilter\": \"src\"\n }\n \n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt\n\n@@ -65,8 +65,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": true,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredTagsIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredTagsIssuesCommits.approved.txt\n\n@@ -56,8 +56,7 @@ settings:\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": true,\n   \"gitLabIssuePattern\": \"nooo\",\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt\n\n@@ -56,8 +56,7 @@ settings:\n     \"customVariable\": \"the value\"\n   },\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt\n\n@@ -65,8 +65,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt\n\n@@ -65,8 +65,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt\n\n@@ -24,8 +24,7 @@ settings:\n   \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt\n\n@@ -23,8 +23,7 @@ settings:\n   \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt\n\n@@ -63,8 +63,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt\n\n@@ -59,8 +59,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt\n\n@@ -66,8 +66,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt\n\n@@ -57,8 +57,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt\n\n@@ -53,8 +53,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt\n\n@@ -51,8 +51,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -62,8 +62,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTypesIssuesCommits.approved.txt\n\n@@ -89,8 +89,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesAuthorsCommits.approved.txt\n\n@@ -69,8 +69,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt\n\n@@ -68,8 +68,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt\n\n@@ -63,8 +63,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesAuthorsCommits.approved.txt\n\n@@ -73,8 +73,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsIssuesCommits.approved.txt\n\n@@ -69,8 +69,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt\n\n@@ -56,8 +56,7 @@ settings:\n   ],\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -141,8 +141,7 @@ settings:\n   \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatConventionalChangelogCanBeRendered.approved.txt\n\n@@ -52,8 +52,7 @@ settings:\n   \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatHelperCanBeSuppliedWithJavascript.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatHelperCanBeSuppliedWithJavascript.approved.txt\n\n@@ -24,8 +24,7 @@ settings:\n   \"gitHubApi\": \"https://api.github.com/repos/tomasbjerre/git-changelog-lib\",\n   \"extendedVariables\": {},\n   \"ignoreCommitsWithoutIssue\": false,\n-  \"gitLabProjectName\": \"tomasbjerre\",\n-  \"semanticMinorPattern\": \"^[Ff]eat.*\"\n+  \"gitLabProjectName\": \"tomasbjerre\"\n }\n \n ---------------------------------------------\n\n\n###\n\n", "completion": "chore: making minor pattern available in a constant"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jun 17 18:28:46 CEST 2021\n+#Thu Jul 15 08:09:03 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.156.4\n+version=1.157.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.157.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.156.4](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.4) (2021-06-17)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  read template from file ([4cf61](https://github.com/tomasbjerre/git-changelog-lib/commit/4cf6198e81fddac))  \n+\n+\n+\n ## [1.156.3](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.3) (2021-06-16)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.156.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 16 18:30:46 CEST 2021\n+#Thu Jun 17 18:28:46 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.156.3\n+version=1.156.4\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.156.4 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java\n\n@@ -15,13 +15,11 @@ public final class ResourceLoader {\n   private ResourceLoader() {}\n \n   public static String getResourceOrFile(final String resourceName) {\n-\n     String templateString = null;\n     try {\n       final Path templatePath = Paths.get(resourceName);\n       if (templatePath.toFile().exists()) {\n-\n-        Files.readAllBytes(templatePath);\n+        templateString = new String(Files.readAllBytes(templatePath), StandardCharsets.UTF_8);\n       } else {\n         InputStream inputStream =\n             getResourceFromClassLoader(resourceName, ResourceLoader.class.getClassLoader());\n\n\n###\n\n", "completion": "fix: read template from file"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,15 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.156.3](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.3) (2021-06-16)\n+\n+\n+\n+\n+\n+\n+\n+\n ## [1.156.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.2) (2021-06-11)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.156.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Fri Jun 11 19:58:42 CEST 2021\n+#Wed Jun 16 18:30:46 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.156.2\n+version=1.156.3\n group=se.bjurr.gitchangelog\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/gitlab/GitLabClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/gitlab/GitLabClient.java\n\n@@ -4,11 +4,9 @@ import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n-\n import org.gitlab.api.GitlabAPI;\n import org.gitlab.api.models.GitlabIssue;\n import org.gitlab.api.models.GitlabProject;\n-\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogIntegrationException;\n \n public class GitLabClient {\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/jira/DefaultJiraClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/jira/DefaultJiraClient.java\n\n@@ -2,7 +2,6 @@ package se.bjurr.gitchangelog.internal.integrations.jira;\n \n import java.util.Map;\n import java.util.Optional;\n-\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogIntegrationException;\n import se.bjurr.gitchangelog.internal.integrations.rest.RestClient;\n \n@@ -40,10 +39,10 @@ public class DefaultJiraClient extends JiraClient {\n     if (json.isPresent()) {\n       final String jsonString = json.get();\n       try {\n-\tfinal JiraIssue jiraIssue = this.toJiraIssue(issue, jsonString);\n-      return Optional.of(jiraIssue);\n+        final JiraIssue jiraIssue = this.toJiraIssue(issue, jsonString);\n+        return Optional.of(jiraIssue);\n       } catch (final Exception e) {\n-    \t  throw new GitChangelogIntegrationException(\"Unable to parse:\\n\"+jsonString,e);\n+        throw new GitChangelogIntegrationException(\"Unable to parse:\\n\" + jsonString, e);\n       }\n     }\n     return Optional.empty();\n\n\n###\n\n", "completion": "chore(release): 1.156.3 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/gitlab/GitLabClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/gitlab/GitLabClient.java\n\n@@ -3,19 +3,16 @@ package se.bjurr.gitchangelog.internal.integrations.gitlab;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n import java.util.Optional;\n-import java.util.concurrent.ConcurrentHashMap;\n+\n import org.gitlab.api.GitlabAPI;\n import org.gitlab.api.models.GitlabIssue;\n import org.gitlab.api.models.GitlabProject;\n+\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogIntegrationException;\n \n public class GitLabClient {\n \n-  private final Map<GitLabProjectIssuesCacheKey, List<GitlabIssue>> cache =\n-      new ConcurrentHashMap<>();\n-\n   private final String hostUrl;\n   private final String apiToken;\n \n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/integrations/jira/DefaultJiraClient.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/integrations/jira/DefaultJiraClient.java\n\n@@ -2,6 +2,7 @@ package se.bjurr.gitchangelog.internal.integrations.jira;\n \n import java.util.Map;\n import java.util.Optional;\n+\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogIntegrationException;\n import se.bjurr.gitchangelog.internal.integrations.rest.RestClient;\n \n@@ -37,8 +38,13 @@ public class DefaultJiraClient extends JiraClient {\n     final String endpoint = this.getEndpoint(issue);\n     final Optional<String> json = this.client.get(endpoint);\n     if (json.isPresent()) {\n-      final JiraIssue jiraIssue = this.toJiraIssue(issue, json.get());\n+      final String jsonString = json.get();\n+      try {\n+\tfinal JiraIssue jiraIssue = this.toJiraIssue(issue, jsonString);\n       return Optional.of(jiraIssue);\n+      } catch (final Exception e) {\n+    \t  throw new GitChangelogIntegrationException(\"Unable to parse:\\n\"+jsonString,e);\n+      }\n     }\n     return Optional.empty();\n   }\n\n\n###\n\n", "completion": "chore: more logging from Jira client"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.156.2](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.2) (2021-06-11)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  adding default changelog template jenkinsci/git-changelog-plugin#58 ([051d6](https://github.com/tomasbjerre/git-changelog-lib/commit/051d61c8116bf19))  \n+\n+\n+\n ## [1.156.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.0) (2021-06-09)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.156.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 09 18:56:29 CEST 2021\n+#Fri Jun 11 19:58:42 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.156.1\n+version=1.156.2\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.156.2 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -13,16 +13,11 @@ import com.github.jknack.handlebars.Handlebars;\n import com.github.jknack.handlebars.Helper;\n import com.github.jknack.handlebars.Template;\n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.StringWriter;\n import java.io.Writer;\n-import java.net.URISyntaxException;\n import java.net.URL;\n-import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.List;\n@@ -47,6 +42,7 @@ import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n import se.bjurr.gitchangelog.internal.settings.Settings;\n import se.bjurr.gitchangelog.internal.settings.SettingsIssue;\n+import se.bjurr.gitchangelog.internal.util.ResourceLoader;\n \n public class GitChangelogApi {\n \n@@ -127,28 +123,8 @@ public class GitChangelogApi {\n     if (this.templateContent != null) {\n       return this.templateContent;\n     }\n-    String templateString = null;\n-    try {\n-      byte[] templateBytes = null;\n-      final Path templatePath = Paths.get(this.settings.getTemplatePath());\n-      if (templatePath.toFile().exists()) {\n-        templateBytes = Files.readAllBytes(templatePath);\n-      } else {\n-        URL templateUrl = GitChangelogApi.class.getResource(this.settings.getTemplatePath());\n-        if (templateUrl == null) {\n-          templateUrl = GitChangelogApi.class.getResource(\"/\" + this.settings.getTemplatePath());\n-          if (templateUrl == null) {\n-            throw new FileNotFoundException(\n-                \"Was unable to find file, or resouce, \\\"\" + this.settings.getTemplatePath() + \"\\\"\");\n-          }\n-        }\n-        templateBytes = Files.readAllBytes(Paths.get(templateUrl.toURI()));\n-        templateString = new String(templateBytes, StandardCharsets.UTF_8);\n-      }\n-    } catch (final IOException | URISyntaxException e) {\n-      throw new RuntimeException(this.settings.getTemplatePath(), e);\n-    }\n-    return templateString;\n+    final String resourceName = this.settings.getTemplatePath();\n+    return ResourceLoader.getResourceOrFile(resourceName);\n   }\n \n   static boolean shouldUseIntegrationIfConfigured(final String templateContent) {\n\n---\n file path A: None | file path B: src/main/java/se/bjurr/gitchangelog/internal/util/ResourceLoader.java\n\n@@ -0,0 +1,57 @@\n+package se.bjurr.gitchangelog.internal.util;\n+\n+import java.io.BufferedReader;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.stream.Collectors;\n+\n+public final class ResourceLoader {\n+  private ResourceLoader() {}\n+\n+  public static String getResourceOrFile(final String resourceName) {\n+\n+    String templateString = null;\n+    try {\n+      final Path templatePath = Paths.get(resourceName);\n+      if (templatePath.toFile().exists()) {\n+\n+        Files.readAllBytes(templatePath);\n+      } else {\n+        InputStream inputStream =\n+            getResourceFromClassLoader(resourceName, ResourceLoader.class.getClassLoader());\n+        if (inputStream == null) {\n+          inputStream =\n+              getResourceFromClassLoader(\n+                  resourceName, Thread.currentThread().getContextClassLoader());\n+        }\n+\n+        if (inputStream == null) {\n+          throw new FileNotFoundException(\n+              \"Was unable to find file, or resouce, \\\"\" + resourceName + \"\\\"\");\n+        }\n+        templateString =\n+            new BufferedReader(new InputStreamReader(inputStream, StandardCharsets.UTF_8))\n+                .lines()\n+                .collect(Collectors.joining(\"\\n\"));\n+      }\n+    } catch (final IOException e) {\n+      throw new RuntimeException(resourceName, e);\n+    }\n+    return templateString;\n+  }\n+\n+  private static InputStream getResourceFromClassLoader(\n+      final String resourceName, final ClassLoader classLoader) {\n+    InputStream inputStream = classLoader.getResourceAsStream(resourceName);\n+    if (inputStream == null) {\n+      inputStream = classLoader.getResourceAsStream(\"/\" + resourceName);\n+    }\n+    return inputStream;\n+  }\n+}\n\n---\n file path A: None | file path B: src/main/resources/changelog.mustache\n\n@@ -0,0 +1,32 @@\n+# Changelog\n+\n+Changelog for {{ownerName}} {{repoName}}.\n+\n+{{#tags}}\n+## {{name}}\n+ {{#issues}}\n+  {{#hasIssue}}\n+   {{#hasLink}}\n+### {{name}} [{{issue}}]({{link}}) {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n+   {{/hasLink}}\n+   {{^hasLink}}\n+### {{name}} {{issue}} {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n+   {{/hasLink}}\n+  {{/hasIssue}}\n+  {{^hasIssue}}\n+### {{name}}\n+  {{/hasIssue}}\n+\n+  {{#commits}}\n+**{{{messageTitle}}}**\n+\n+{{#messageBodyItems}}\n+ * {{.}} \n+{{/messageBodyItems}}\n+\n+[{{hash}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}} *{{commitTime}}*\n+\n+  {{/commits}}\n+\n+ {{/issues}}\n+{{/tags}}\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testPathFilterCanBeSpecified.approved.txt\n\n@@ -10,7 +10,6 @@ Extended variable: {{customVariable}}\n * {{authorName}}\n {{/authors}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCommitsWithoutIssueCanBeIgnoredIssuesCommits.approved.txt\n\n@@ -21,7 +21,6 @@ Changelog of Git Changelog.\n  {{/commits}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatCustomVariablesCanBeUsed.approved.txt\n\n@@ -10,7 +10,6 @@ Extended variable: {{customVariable}}\n * {{authorName}}\n {{/authors}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatIssuesCanBeRemoved.approved.txt\n\n@@ -21,7 +21,6 @@ Changelog of Git Changelog.\n  {{/commits}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatReadableGroupCanBeSet.approved.txt\n\n@@ -21,7 +21,6 @@ Changelog of Git Changelog.\n  {{/commits}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatRevertedCommitsAreRemoved.approved.txt\n\n@@ -12,7 +12,6 @@ Changelog of Git Changelog.\n \n {{/commits}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.testThatTagsThatAreEmptyAfterCommitsHaveBeenIgnoredAreRemoved.approved.txt\n\n@@ -10,7 +10,6 @@ Extended variable: {{customVariable}}\n * {{authorName}}\n {{/authors}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testAuthorsCommits.approved.txt\n\n@@ -16,7 +16,6 @@ Changelog of Git Changelog.\n \n {{/authors}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommits.approved.txt\n\n@@ -12,7 +12,6 @@ Changelog of Git Changelog.\n \n {{/commits}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testCommitsVariables.approved.txt\n\n@@ -19,7 +19,6 @@ Changelog of Git Changelog.\n \n {{/commits}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLabels.approved.txt\n\n@@ -10,7 +10,6 @@ template:\n {{/issues}}\n {{/tags}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueLinkedIssues.approved.txt\n\n@@ -6,7 +6,6 @@ template:\n     {{/hasLinkedIssues}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueTitles.approved.txt\n\n@@ -4,7 +4,6 @@ template:\n {{name}} {{title}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssueType.approved.txt\n\n@@ -15,7 +15,6 @@ isNoIssue: {{isNoIssue}}\n {{/issues}}\n {{/tags}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testIssuesCommits.approved.txt\n\n@@ -21,7 +21,6 @@ Changelog of Git Changelog.\n  {{/commits}}\n {{/issues}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testTagsCommits.approved.txt\n\n@@ -16,7 +16,6 @@ Changelog of Git Changelog.\n  {{/commits}}\n {{/tags}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/TemplatesTest.testThatIgnoreCommitsIfMessageMatchesCanBeEmptyToDisableTheFeature.approved.txt\n\n@@ -9,7 +9,6 @@ template:\n  {{/merge}}\n {{/commits}}\n \n-\n ---------------------------------------------\n \n settings:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -128,7 +128,6 @@ Has paragraphs: {{hash}}\n \n \n \n-\n ---------------------------------------------\n \n settings:\n@@ -653,7 +652,6 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n \n-\n ---------------------------------------------\n \n context:\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatHelperCanBeSuppliedWithJavascript.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatHelperCanBeSuppliedWithJavascript.approved.txt\n\n@@ -11,7 +11,6 @@ template:\n \n {{/commits}}\n \n-\n ---------------------------------------------\n \n settings:\n\n\n###\n\n", "completion": "fix: adding default changelog template jenkinsci/git-changelog-plugin#58"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 09 18:49:04 CEST 2021\n+#Wed Jun 09 18:56:29 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.156.0\n+version=1.156.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.156.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.156.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.156.0) (2021-06-09)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  semantic version stepping ([3c0cf](https://github.com/tomasbjerre/git-changelog-lib/commit/3c0cf44551aed21))  \n+\n+\n+\n ## [1.155.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.155.0) (2021-06-09)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.156.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 09 17:52:09 CEST 2021\n+#Wed Jun 09 18:49:04 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.155.0\n+version=1.156.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.156.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -198,6 +198,15 @@ public class GitChangelogApi {\n    * been configured.\n    */\n   public SemanticVersion getNextSemanticVersion() throws GitChangelogRepositoryException {\n+    final boolean fromGiven =\n+        this.settings.getFromRef().isPresent() || this.settings.getFromCommit().isPresent();\n+    final SemanticVersion highestSemanticVersion = this.getHighestSemanticVersion();\n+    if (!fromGiven) {\n+      final Optional<String> tag = highestSemanticVersion.findTag();\n+      if (tag.isPresent()) {\n+        this.withFromRef(tag.get());\n+      }\n+    }\n     final Changelog changelog = this.getChangelog(false);\n     final List<String> tags = this.getTagsAsStrings(changelog);\n     final List<String> commits = this.getCommitMessages(changelog);\n@@ -205,7 +214,7 @@ public class GitChangelogApi {\n     final String minorVersionPattern = this.settings.getSemanticMinorPattern().orElse(null);\n     final SemanticVersioning semanticVersioning =\n         new SemanticVersioning(tags, commits, majorVersionPattern, minorVersionPattern);\n-    return semanticVersioning.getNextVersion();\n+    return semanticVersioning.getNextVersion(highestSemanticVersion);\n   }\n \n   public SemanticVersion getHighestSemanticVersion() throws GitChangelogRepositoryException {\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -15,21 +15,18 @@ public class SemanticVersioning {\n   private final List<String> commits;\n   private final Pattern majorPattern;\n   private final Pattern minorPattern;\n-  private final List<String> tags;\n \n   public SemanticVersioning(\n       final List<String> tags,\n       final List<String> commits,\n       final String majorPattern,\n       final String minorPattern) {\n-    this.tags = tags;\n     this.commits = commits;\n     this.majorPattern = Pattern.compile(this.notNull(majorPattern, \"majorPattern\"));\n     this.minorPattern = Pattern.compile(this.notNull(minorPattern, \"minorPattern\"));\n   }\n \n-  public SemanticVersion getNextVersion() {\n-    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+  public SemanticVersion getNextVersion(final SemanticVersion highestVersion) {\n     final VERSION_STEP versionStep = this.getVersionStep();\n     if (versionStep == VERSION_STEP.MAJOR) {\n       return new SemanticVersion(highestVersion.getMajor() + 1, 0, 0);\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -8,6 +8,7 @@ import java.util.List;\n import org.junit.Before;\n import org.junit.Test;\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n \n public class SemanticVersioningTest {\n@@ -20,8 +21,8 @@ public class SemanticVersioningTest {\n \n   @Before\n   public void before() {\n-    this.tags = new ArrayList<String>();\n-    this.commits = new ArrayList<String>();\n+    this.tags = new ArrayList<>();\n+    this.commits = new ArrayList<>();\n     this.majorPattern = \"[Bb]reaking:.*\";\n     this.minorPattern = \"[Uu]pdate:.*\";\n     this.sut =\n@@ -29,15 +30,32 @@ public class SemanticVersioningTest {\n   }\n \n   @Test\n-  public void smokeTest() throws Throwable {\n-    final GitChangelogApi builder =\n+  public void smokeTest1() throws Throwable {\n+    final GitChangelogApi builder1 =\n         gitChangelogApiBuilder() //\n             .withToCommit(\"7c1c366\") //\n             .withSemanticMajorVersionPattern(\"breaking:.*\") //\n             .withSemanticMinorVersionPattern(\"update:.*\");\n \n-    assertThat(builder.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5\");\n-    assertThat(builder.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4\");\n+    assertThat(builder1.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5\");\n+\n+    final GitChangelogApi builder2 =\n+        gitChangelogApiBuilder() //\n+            .withToCommit(\"7c1c366\") //\n+            .withSemanticMajorVersionPattern(\"breaking:.*\") //\n+            .withSemanticMinorVersionPattern(\"update:.*\");\n+    assertThat(builder2.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4\");\n+  }\n+\n+  @Test\n+  public void smokeTest2() throws Throwable {\n+    final SemanticVersion nextSemanticVersion =\n+        gitChangelogApiBuilder()\n+            .withToRef(\"1.155.0\") //\n+            .withSemanticMajorVersionPattern(\"^[Bb]reaking.*\")\n+            .withSemanticMinorVersionPattern(\"^[Ff]eat.*\")\n+            .getNextSemanticVersion();\n+    assertThat(nextSemanticVersion.toString()).isEqualTo(\"1.155.1\");\n   }\n \n   @Test\n@@ -45,10 +63,8 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"breaking: whatever\");\n \n-    assertThat(\n-            SemanticVersioning.getHighestVersion(this.tags)\n-                + \" -> \"\n-                + this.sut.getNextVersion()) //\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n         .isEqualTo(\"1.0.0 -> 2.0.0\");\n   }\n \n@@ -57,10 +73,8 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"update: whatever\");\n \n-    assertThat(\n-            SemanticVersioning.getHighestVersion(this.tags)\n-                + \" -> \"\n-                + this.sut.getNextVersion()) //\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n         .isEqualTo(\"1.0.0 -> 1.1.0\");\n   }\n \n@@ -69,10 +83,8 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"chore: whatever\");\n \n-    assertThat(\n-            SemanticVersioning.getHighestVersion(this.tags)\n-                + \" -> \"\n-                + this.sut.getNextVersion()) //\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n+    assertThat(highestVersion + \" -> \" + this.sut.getNextVersion(highestVersion)) //\n         .isEqualTo(\"1.0.0 -> 1.0.1\");\n   }\n }\n\n\n###\n\n", "completion": "fix: semantic version stepping"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.155.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.155.0) (2021-06-09)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  removing git-changelog-settings.json to fix classloader issue in command line tool ([2d07a](https://github.com/tomasbjerre/git-changelog-lib/commit/2d07aefbd3900e5))  \n+\n+\n+\n ## [1.154.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.154.0) (2021-06-09)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.155.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 09 16:45:38 CEST 2021\n+#Wed Jun 09 17:52:09 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.154.0\n+version=1.155.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.155.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApiConstants.java\n\n@@ -4,7 +4,6 @@ public final class GitChangelogApiConstants {\n \n   public static final String ZERO_COMMIT = \"0000000000000000000000000000000000000000\";\n   public static final String REF_MASTER = \"master\";\n-  public static final String DEFAULT_FILE = \"git-changelog-settings.json\";\n   public static final boolean DEFAULT_REMOVE_ISSUE = true;\n   public static final String DEFAULT_TIMEZONE = \"UTC\";\n   public static final String DEFAULT_DATEFORMAT = \"YYYY-MM-dd HH:mm:ss\";\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/settings/Settings.java\n\n@@ -3,7 +3,6 @@ package se.bjurr.gitchangelog.internal.settings;\n import static java.nio.charset.StandardCharsets.UTF_8;\n import static java.util.Optional.ofNullable;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_DATEFORMAT;\n-import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_FILE;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_GITHUB_ISSUE_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_GITLAB_ISSUE_PATTERN;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_IGNORE_COMMITS_REGEXP;\n@@ -13,6 +12,7 @@ import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_READABL\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_REMOVE_ISSUE;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_TIMEZONE;\n import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.DEFAULT_UNTAGGED_NAME;\n+import static se.bjurr.gitchangelog.api.GitChangelogApiConstants.ZERO_COMMIT;\n import static se.bjurr.gitchangelog.internal.util.Preconditions.emptyToNull;\n \n import com.google.gson.Gson;\n@@ -370,13 +370,19 @@ public class Settings implements Serializable {\n   }\n \n   public static Settings defaultSettings() {\n-    URL resource = null;\n-    try {\n-      resource = Settings.class.getClassLoader().getResource(DEFAULT_FILE);\n-      return fromFile(resource.toURI().toURL());\n-    } catch (final Exception e) {\n-      throw new RuntimeException(\"Cannot find default config in \" + resource, e);\n-    }\n+    final Settings s = new Settings();\n+    s.setFromRepo(\".\");\n+    s.setFromCommit(ZERO_COMMIT);\n+    s.setToRef(\"refs/heads/master\");\n+    s.setIgnoreCommitsIfMessageMatches(\"^Merge.*\");\n+    s.setReadableTagName(\"/([^/]+?)$\");\n+    s.setDateFormat(\"YYYY-MM-dd HH:mm:ss\");\n+    s.setUntaggedName(\"No tag\");\n+    s.setNoIssueName(\"No issue\");\n+    s.setTimeZone(\"UTC\");\n+    s.setRemoveIssueFromMessage(true);\n+    s.setJiraIssuePattern(\"\\\\\\\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\\\\\\\b\");\n+    return s;\n   }\n \n   public void setRemoveIssueFromMessage(final boolean removeIssueFromMessage) {\n\n---\n file path A: src/main/resources/git-changelog-settings.json | file path B: None\n\n@@ -1,22 +0,0 @@\n-{\n- \"fromRepo\": \".\",\n- \"fromCommit\": \"0000000000000000000000000000000000000000\",\n- \"toRef\": \"refs/heads/master\",\n- \n- \"ignoreCommitsIfMessageMatches\": \"^\\\\[maven-release-plugin\\\\].*|^\\\\[Gradle Release Plugin\\\\].*|^Merge.*\",\n- \"readableTagName\": \"/([^/]+?)$\",\n- \"dateFormat\": \"YYYY-MM-dd HH:mm:ss\",\n- \"untaggedName\": \"No tag\",\n- \"noIssueName\": \"No issue\",\n- \"templatePath\": \"git-changelog-template.mustache\",\n- \"timeZone\": \"UTC\",\n- \"removeIssueFromMessage\": \"true\",\n- \n- \"jiraServer\": \"\",\n- \"jiraIssuePattern\": \"\\\\b[a-zA-Z]([a-zA-Z]+)-([0-9]+)\\\\b\",\n-\n- \"customIssues\": [\n-  { \"name\": \"Bugs\", \"pattern\": \"#bug\" },\n-  { \"name\": \"Features\", \"pattern\": \"#feature\" }\n- ]\n-}\n\n\n###\n\n", "completion": "fix: removing git-changelog-settings.json to fix classloader issue in command line tool"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.154.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.154.0) (2021-06-09)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  NPE when given file has no parent ([7a25e](https://github.com/tomasbjerre/git-changelog-lib/commit/7a25e670caf98a9))  \n+\n+\n+\n ## [1.153.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.153.0) (2021-06-09)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.154.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 09 16:25:30 CEST 2021\n+#Wed Jun 09 16:45:38 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.153.0\n+version=1.154.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.154.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -173,9 +173,11 @@ public class GitChangelogApi {\n    */\n   public void toFile(final File file) throws GitChangelogRepositoryException, IOException {\n     final File parentFile = file.getParentFile();\n-    final boolean folderExists = parentFile.exists() || parentFile.mkdirs();\n-    if (!folderExists) {\n-      throw new RuntimeException(\"Folder \" + parentFile.getAbsolutePath() + \" cannot be created\");\n+    if (parentFile != null) {\n+      final boolean folderExists = parentFile.exists() || parentFile.mkdirs();\n+      if (!folderExists) {\n+        throw new RuntimeException(\"Folder \" + parentFile.getAbsolutePath() + \" cannot be created\");\n+      }\n     }\n     Files.write(file.toPath(), this.render().getBytes(UTF_8));\n   }\n\n\n###\n\n", "completion": "fix: NPE when given file has no parent"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.153.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.153.0) (2021-06-09)\n+\n+\n+\n+\n+\n+### Bug Fixes\n+\n+-  when file was in a new folder, it created folder ([5a96f](https://github.com/tomasbjerre/git-changelog-lib/commit/5a96f3bd961b4df))  \n+\n+\n+\n ## [1.152.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.152.1) (2021-06-03)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.153.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jun 03 20:46:51 CEST 2021\n+#Wed Jun 09 16:25:30 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.152.1\n+version=1.153.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.153.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -172,7 +172,11 @@ public class GitChangelogApi {\n    * @throws IOException When file cannot be written.\n    */\n   public void toFile(final File file) throws GitChangelogRepositoryException, IOException {\n-    file.mkdirs();\n+    final File parentFile = file.getParentFile();\n+    final boolean folderExists = parentFile.exists() || parentFile.mkdirs();\n+    if (!folderExists) {\n+      throw new RuntimeException(\"Folder \" + parentFile.getAbsolutePath() + \" cannot be created\");\n+    }\n     Files.write(file.toPath(), this.render().getBytes(UTF_8));\n   }\n \n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java | file path B: src/test/java/se/bjurr/gitchangelog/api/GitChangelogApiTest.java\n\n@@ -8,6 +8,7 @@ import static se.bjurr.gitchangelog.internal.integrations.rest.RestClient.mock;\n \n import java.net.URL;\n import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.HashMap;\n import java.util.Map;\n@@ -273,4 +274,19 @@ public class GitChangelogApiTest {\n \n     ApprovalsWrapper.verify(given);\n   }\n+\n+  @Test\n+  public void testThatFileCanBeSupplied() throws Exception {\n+    final String templatePath = \"templatetest/testThatRevertedCommitsAreRemoved.mustache\";\n+\n+    final Path path = Paths.get(\"build\", \"testdirtocreate\", \"testThatFileCanBeSupplied.md\");\n+    gitChangelogApiBuilder() //\n+        .withFromCommit(\"aa1fd33\") //\n+        .withToCommit(\"4c6e078\") //\n+        .withTemplatePath(templatePath) //\n+        .toFile(path.toFile());\n+\n+    System.out.println(path.toFile().getAbsolutePath());\n+    assertThat(path.toFile()).exists().isFile();\n+  }\n }\n\n\n###\n\n", "completion": "fix: when file was in a new folder, it created folder"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,18 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.152.1](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.152.1) (2021-06-03)\n+\n+\n+\n+### Features\n+\n+-  set git repo from file ([17a25](https://github.com/tomasbjerre/git-changelog-lib/commit/17a25ff4be26520))  \n+\n+\n+\n+\n+\n ## [1.152.0](https://github.com/tomasbjerre/git-changelog-lib/releases/tag/1.152.0) (2021-06-03)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.152.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jun 03 19:06:45 CEST 2021\n+#Thu Jun 03 20:46:51 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.152.0\n+version=1.152.1\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.152.1 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -312,6 +312,11 @@ public class GitChangelogApi {\n     return this;\n   }\n \n+  public GitChangelogApi withFromRepo(final File fromRepo) {\n+    this.settings.setFromRepo(fromRepo.getAbsolutePath());\n+    return this;\n+  }\n+\n   /**\n    * URL pointing at GitHub API. When configured, the {@link Issue#getTitle()} will be populated\n    * with title from GitHub.<br>\n\n\n###\n\n", "completion": "feat: set git repo from file"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,19 @@\n \n Changelog of git-changelog-lib.\n \n+## [1.152.0](https://gitlab.com/html-validate/html-validate/compare/1.152.0) (2021-06-03)\n+\n+\n+\n+### Features\n+\n+-  subString and ifMatches helpers ([c64a1bc9312b6ec](https://github.com/tomasbjerre/git-changelog-lib/commit/c64a1bc9312b6ec))\n+\n+\n+\n+\n+\n+\n ## [1.151.0](https://gitlab.com/html-validate/html-validate/compare/1.151.0) (2021-06-03)\n \n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.152.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Thu Jun 03 18:38:54 CEST 2021\n+#Thu Jun 03 19:06:45 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.151.0\n+version=1.152.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.152.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: README.md | file path B: README.md\n\n@@ -333,6 +333,30 @@ Conditional, renders a block if `a` equals `b`.\n {{/tags}}\n ```\n \n+### `ifMatches <a> <b>`\n+\n+Conditional, renders a block if `a` matches regexp `b`.\n+\n+```hbs\n+{{#eachCommitFixes .}}\n+ {{#ifMatches . \"^[A-Z]+-[0-9]+\"}}\n+  fixes : \"{{subString . 0 3}}\" and number {{subString . 4}}\n+ {{/ifMatches}}\n+{{/eachCommitFixes}}\n+```\n+\n+### `subString <a> <b> <c>`\n+\n+Works just like [Java substring](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#substring(int)).\n+\n+```hbs\n+{{#eachCommitFixes .}}\n+ {{#ifMatches . \"^[A-Z]+-[0-9]+\"}}\n+  fixes : \"{{subString . 0 3}}\" and number {{subString . 4}}\n+ {{/ifMatches}}\n+{{/eachCommitFixes}}\n+```\n+\n ## Context\n \n The template is supplied with this context:\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -33,6 +33,24 @@ public class Helpers {\n           final boolean equality = a.equals(b);\n           return conditional(options, equality);\n         });\n+    ALL.put(\n+        \"ifMatches\",\n+        (final Object a, final Options options) -> {\n+          final String regexp = (String) options.params[0];\n+          final boolean equality = a.toString().matches(regexp);\n+          return conditional(options, equality);\n+        });\n+    ALL.put(\n+        \"subString\",\n+        (final Object a, final Options options) -> {\n+          final Integer from = (Integer) options.params[0];\n+          if (options.params.length == 1) {\n+            return a.toString().substring(from);\n+          } else {\n+            final Integer to = (Integer) options.params[1];\n+            return a.toString().substring(from, to);\n+          }\n+        });\n \n     ALL.put(\n         \"ifReleaseTag\",\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -17,8 +17,18 @@ Commits:\n {{/commits}}\n \n \n+ifMatches and subString:\n+{{#commits}}\n+ {{#eachCommitFixes .}}\n+  {{#ifMatches . \"^[A-Z]+-[0-9]+\"}}\n+   fixes : \"{{subString . 0 3}}\" and number {{subString . 4}}\n+  {{/ifMatches}}\n+ {{/eachCommitFixes}}\n+{{/commits}}\n+\n+\n {{#tags}}\n- {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} ja {{else}} nej {{/ifEquals}}\n+ {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} yes {{else}} no {{/ifEquals}}\n {{/tags}}\n \n \n@@ -197,9 +207,13 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  * hash: 601c009bff8d551 message: fix: dont use integrations when determining versions\n \n \n- Unreleased Unreleased ?  ja \n- 1.147.2 Unreleased ?  nej \n- 1.147.1 Unreleased ?  nej \n+ifMatches and subString:\n+   fixes : \"ABC\" and number 123\n+\n+\n+ Unreleased Unreleased ?  yes \n+ 1.147.2 Unreleased ?  no \n+ 1.147.1 Unreleased ?  no \n \n \n ## breaking changes:\n\n---\n file path A: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -15,8 +15,18 @@ Commits:\n {{/commits}}\n \n \n+ifMatches and subString:\n+{{#commits}}\n+ {{#eachCommitFixes .}}\n+  {{#ifMatches . \"^[A-Z]+-[0-9]+\"}}\n+   fixes : \"{{subString . 0 3}}\" and number {{subString . 4}}\n+  {{/ifMatches}}\n+ {{/eachCommitFixes}}\n+{{/commits}}\n+\n+\n {{#tags}}\n- {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} ja {{else}} nej {{/ifEquals}}\n+ {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} yes {{else}} no {{/ifEquals}}\n {{/tags}}\n \n \n\n\n###\n\n", "completion": "feat: subString and ifMatches helpers"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Wed Jun 02 20:59:53 CEST 2021\n+#Thu Jun 03 18:38:54 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.150.0\n+version=1.151.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.151.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: README.md | file path B: README.md\n\n@@ -323,6 +323,16 @@ Conditional, renders a block if given `Footer` has `value`.\n {{/commits}}\n ```\n \n+### `ifEquals <a> <b>`\n+\n+Conditional, renders a block if `a` equals `b`.\n+\n+```hbs\n+{{#tags}}\n+ {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} ja {{else}} nej {{/ifEquals}}\n+{{/tags}}\n+```\n+\n ## Context\n \n The template is supplied with this context:\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -23,9 +23,17 @@ public class Helpers {\n   private static final Pattern FOOTER_PATTERN =\n       Pattern.compile(\"^(BREAKING[ -]CHANGE|[^ ]+)(((: )|( #))(.+))\");\n \n-  public static final Map<String, Helper<?>> ALL = new TreeMap<String, Helper<?>>();\n+  public static final Map<String, Helper<?>> ALL = new TreeMap<>();\n \n   static {\n+    ALL.put(\n+        \"ifEquals\",\n+        (final Object a, final Options options) -> {\n+          final Object b = options.params[0];\n+          final boolean equality = a.equals(b);\n+          return conditional(options, equality);\n+        });\n+\n     ALL.put(\n         \"ifReleaseTag\",\n         (final Tag tag, final Options options) -> {\n@@ -174,7 +182,7 @@ public class Helpers {\n   private static List<String> commitFixes(final Object commitMessage) {\n     final Matcher matcher = Pattern.compile(\"\\\\(fixes ([^)]+)\").matcher(commitMessage.toString());\n     if (!matcher.find()) {\n-      return new ArrayList<String>();\n+      return new ArrayList<>();\n     }\n     final String group = matcher.group(1);\n     final String value = group == null ? \"\" : group;\n@@ -184,7 +192,7 @@ public class Helpers {\n   private static List<String> commitRefs(final Object commitMessage) {\n     final Matcher matcher = Pattern.compile(\"\\\\(refs ([^)]+)\").matcher(commitMessage.toString());\n     if (!matcher.find()) {\n-      return new ArrayList<String>();\n+      return new ArrayList<>();\n     }\n     final String group = matcher.group(1);\n     final String value = group == null ? \"\" : group;\n@@ -210,11 +218,11 @@ public class Helpers {\n   private static List<String> commitScopes(final Object commitMessage) {\n     final Matcher matcher = Helpers.CONVENTIONAL_PATTERN.matcher(commitMessage.toString());\n     if (!matcher.find()) {\n-      return new ArrayList<String>();\n+      return new ArrayList<>();\n     }\n     final String group = matcher.group(3);\n     if (group == null) {\n-      return new ArrayList<String>();\n+      return new ArrayList<>();\n     }\n     return Arrays.stream(group.split(\":\")).map((it) -> it.trim()).collect(Collectors.toList());\n   }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -17,6 +17,11 @@ Commits:\n {{/commits}}\n \n \n+{{#tags}}\n+ {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} ja {{else}} nej {{/ifEquals}}\n+{{/tags}}\n+\n+\n ## breaking changes:\n  {{#ifContainsBreaking commits}}\n   contains breaking changes\n@@ -192,6 +197,11 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  * hash: 601c009bff8d551 message: fix: dont use integrations when determining versions\n \n \n+ Unreleased Unreleased ?  ja \n+ 1.147.2 Unreleased ?  nej \n+ 1.147.1 Unreleased ?  nej \n+\n+\n ## breaking changes:\n   contains breaking changes\n     is breaking: ed18f49f74281ba \n\n---\n file path A: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -15,6 +15,11 @@ Commits:\n {{/commits}}\n \n \n+{{#tags}}\n+ {{name}} Unreleased ? {{#ifEquals name \"Unreleased\"}} ja {{else}} nej {{/ifEquals}}\n+{{/tags}}\n+\n+\n ## breaking changes:\n  {{#ifContainsBreaking commits}}\n   contains breaking changes\n\n\n###\n\n", "completion": "feat: ifEquals helper"}
{"prompt": " file path A: CHANGELOG.md | file path B: CHANGELOG.md\n\n@@ -2,6 +2,15 @@\n \n Changelog of git-changelog-lib.\n \n+## 1.150.0\n+### No issue\n+\n+**feat: regexp in `commitType` and `commitScope`**\n+\n+\n+[2d3c6660bfe8d64](https://github.com/tomasbjerre/git-changelog-lib/commit/2d3c6660bfe8d64) Tomas Bjerre *2021-06-02 18:58:59*\n+\n+\n ## 1.149.6\n ### No issue\n \n\n\n###\n\n", "completion": "chore(release): Updating changelog with 1.150.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Jun 01 18:02:17 CEST 2021\n+#Wed Jun 02 20:59:53 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.149.8\n+version=1.150.0\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.150.0 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -157,7 +157,10 @@ public class Helpers {\n \n   private static boolean commitScope(final Commit commit, final Options options) {\n     final String scope = options.hash(\"scope\").toString();\n-    return commitScopes(commit.getMessage()).contains(scope);\n+    return commitScopes(commit.getMessage()).stream()\n+        .filter(it -> it.matches(scope))\n+        .findFirst()\n+        .isPresent();\n   }\n \n   private static String revertedCommit(final Object commitMessage) {\n@@ -259,7 +262,7 @@ public class Helpers {\n \n   private static boolean commitType(final String commitMessage, final Options options) {\n     final String type = options.hash(\"type\").toString();\n-    return getType(commitMessage).equalsIgnoreCase(type);\n+    return getType(commitMessage).matches(type);\n   }\n \n   private static String getType(final String commitMessage) {\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -86,6 +86,7 @@ Has paragraphs: {{hash}}\n  {{#ifCommitType . type=\"revert\"}} is type revert {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n  {{#ifCommitType . type=\"\"}} commit has no type {{/ifCommitType}}\n+ {{#ifCommitType . type=\"fix|revert\"}} commit has type fix or revert {{/ifCommitType}}\n \n  {{#ifCommitScope . scope=\"utils\"}} is scope utils {{/ifCommitScope}}\n \n@@ -356,6 +357,7 @@ second-token-here: value of second token\n  \n  \n  \n+ \n \n  \n \n@@ -379,6 +381,7 @@ Refs #133\n  \n   is type fix \n  \n+  commit has type fix or revert \n \n  \n \n@@ -397,6 +400,7 @@ BREAKING CHANGE: &#x60;extends&#x60; key in config file is now used for extendin\n  \n  \n  \n+ \n \n  \n \n@@ -415,6 +419,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+ \n \n  \n \n@@ -433,6 +438,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+ \n \n  \n \n@@ -449,6 +455,7 @@ BREAKING CHANGE: refactor to use JavaScript features not available in Node 6.\n  \n  \n  \n+ \n \n  \n \n@@ -467,6 +474,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n   is type revert \n  \n  \n+  commit has type fix or revert \n \n  \n \n@@ -484,6 +492,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   is type fix \n  \n+  commit has type fix or revert \n \n   is scope utils \n \n@@ -503,6 +512,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n  \n+ \n \n   is scope utils \n \n@@ -520,6 +530,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n   commit has no type \n+ \n \n  \n \n@@ -536,6 +547,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n   commit has no type \n+ \n \n  \n \n@@ -552,6 +564,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   is type fix \n  \n+  commit has type fix or revert \n \n  \n \n@@ -568,6 +581,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n   commit has no type \n+ \n \n  \n \n@@ -584,6 +598,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n  \n   commit has no type \n+ \n \n  \n \n@@ -600,6 +615,7 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  \n   is type fix \n  \n+  commit has type fix or revert \n \n  \n \n\n---\n file path A: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/helpers/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -84,6 +84,7 @@ Has paragraphs: {{hash}}\n  {{#ifCommitType . type=\"revert\"}} is type revert {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n  {{#ifCommitType . type=\"\"}} commit has no type {{/ifCommitType}}\n+ {{#ifCommitType . type=\"fix|revert\"}} commit has type fix or revert {{/ifCommitType}}\n \n  {{#ifCommitScope . scope=\"utils\"}} is scope utils {{/ifCommitScope}}\n \n\n\n###\n\n", "completion": "feat: regexp in `commitType` and `commitScope`"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Jun 01 17:58:01 CEST 2021\n+#Tue Jun 01 18:02:17 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.149.7\n+version=1.149.8\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.149.8 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Jun 01 17:42:58 CEST 2021\n+#Tue Jun 01 17:58:01 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.149.6\n+version=1.149.7\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.149.7 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Tue Jun 01 17:40:24 CEST 2021\n+#Tue Jun 01 17:42:58 CEST 2021\n description='Library for parsing report files from static code analysis'\n-version=1.149.5\n+version=1.149.6\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.149.6 [GRADLE SCRIPT]"}
{"prompt": " file path A: gradle.properties | file path B: gradle.properties\n\n@@ -1,4 +1,4 @@\n-#Mon May 31 19:43:54 CEST 2021\n-version=1.149.4\n+#Tue Jun 01 17:40:24 CEST 2021\n description='Library for parsing report files from static code analysis'\n+version=1.149.5\n group=se.bjurr.gitchangelog\n\n\n###\n\n", "completion": "chore(release): 1.149.5 [GRADLE SCRIPT]"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -32,6 +32,17 @@ public class Helpers {\n           return conditional(options, isReleaseTag(tag));\n         });\n \n+    TAG_HELPERS.put(\n+        \"tagDate\",\n+        (final Tag tag, final Options options) -> {\n+          return getDate(tag.getTagTime());\n+        });\n+\n+    COMMITS_HELPERS.put(\n+        \"commitDate\",\n+        (final Commit commit, final Options options) -> {\n+          return getDate(commit.getCommitTime());\n+        });\n     COMMITS_HELPERS.put(\n         \"ifContainsType\",\n         (final List<Commit> commits, final Options options) -> {\n@@ -97,6 +108,13 @@ public class Helpers {\n     return buffer;\n   }\n \n+  private static String getDate(final String tagTime) {\n+    if (tagTime == null || !tagTime.contains(\" \")) {\n+      return \"\";\n+    }\n+    return tagTime.split(\" \")[0];\n+  }\n+\n   private static boolean commitScope(final Commit commit, final Options options) {\n     final String scope = options.hash(\"scope\").toString();\n     return commitScopes(commit.getMessage()).contains(scope);\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -26,13 +26,16 @@ Commits:\n  {{#ifContainsType commits type=\"fix\"}}\n   commits contains fix\n  {{/ifContainsType}}\n- \n+\n+ date: {{tagDate .}} \n  \n {{/tags}}\n \n \n {{#commits}}\n  Commit: {{.}}\n+ date: {{commitDate .}} \n+\n  {{#ifCommitType . type=\"revert\"}} is type revert {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n \n@@ -112,25 +115,30 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n  tag: name: Unreleased\n  \n   commits contains fix\n- \n+\n+ date:  \n  \n  tag: name: 1.147.2\n   \"name: 1.147.2\" is a release tag\n  \n   commits contains fix\n- \n+\n+ date: 2021-05-24 \n  \n  tag: name: 1.147.1\n   \"name: 1.147.1\" is a release tag\n  \n   commits contains fix\n- \n+\n+ date: 2021-05-23 \n  \n \n \n  Commit: hash: d3462925f226d08 message: Revert &quot;[Gradle Release Plugin] - pre tag commit:  &#x27;1.94&#x27;.&quot;\n \n This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n+ date: 2021-05-25 \n+\n   is type revert \n  \n \n@@ -145,6 +153,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 724a04a18602ce9 message: fix(utils:mix): the description (fixes ABC-123)\n+ date: 2021-05-25 \n+\n  \n   is type fix \n \n@@ -161,6 +171,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 5fb068c6ccad741 message: feat(utils): more utils\n+ date: 2021-05-25 \n+\n  \n  \n \n@@ -175,6 +187,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 4c6e07857c48c98 message: doing change 2\n+ date: 2021-05-25 \n+\n  \n  \n \n@@ -188,6 +202,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: aa1fd339a07e6ea message: New version: 1.147.2 [GRADLE SCRIPT]\n+ date: 2021-05-24 \n+\n  \n  \n \n@@ -201,6 +217,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 38fc504697f8d04 message: fix: dont require semantic patterns to get highest tag\n+ date: 2021-05-24 \n+\n  \n   is type fix \n \n@@ -214,6 +232,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 7a839ad349aef46 message: Updating changelog with 1.147.1 [GRADLE SCRIPT]\n+ date: 2021-05-23 \n+\n  \n  \n \n@@ -227,6 +247,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: e49a9f159266845 message: New version: 1.147.1 [GRADLE SCRIPT]\n+ date: 2021-05-23 \n+\n  \n  \n \n@@ -240,6 +262,8 @@ This reverts commit 1edc0d71eccce51abfb5f62fdddfbe73913785f5.\n \n \n  Commit: hash: 601c009bff8d551 message: fix: dont use integrations when determining versions\n+ date: 2021-05-23 \n+\n  \n   is type fix \n \n\n---\n file path A: src/test/resources/templatetest/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -24,13 +24,16 @@ Commits:\n  {{#ifContainsType commits type=\"fix\"}}\n   commits contains fix\n  {{/ifContainsType}}\n- \n+\n+ date: {{tagDate .}} \n  \n {{/tags}}\n \n \n {{#commits}}\n  Commit: {{.}}\n+ date: {{commitDate .}} \n+\n  {{#ifCommitType . type=\"revert\"}} is type revert {{/ifCommitType}}\n  {{#ifCommitType . type=\"fix\"}} is type fix {{/ifCommitType}}\n \n\n\n###\n\n", "completion": "feat(helpers):  and"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -33,7 +33,7 @@ public class Helpers {\n         });\n \n     COMMITS_HELPERS.put(\n-        \"ifContainingType\",\n+        \"ifContainsType\",\n         (final List<Commit> commits, final Options options) -> {\n           return conditional(options, containsType(commits, options));\n         });\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt | file path B: src/test/java/se/bjurr/gitchangelog/api/HandlebarsHelperTest.testThatBuiltInHelperMethodsCanBeUsed.approved.txt\n\n@@ -23,9 +23,9 @@ Commits:\n   \"{{.}}\" is a release tag\n  {{/ifReleaseTag}}\n  \n- {{#ifContainingType commits type=\"fix\"}}\n+ {{#ifContainsType commits type=\"fix\"}}\n   commits contains fix\n- {{/ifContainingType}}\n+ {{/ifContainsType}}\n  \n  \n {{/tags}}\n\n---\n file path A: src/test/resources/templatetest/testThatBuiltInHelperMethodsCanBeUsed.mustache | file path B: src/test/resources/templatetest/testThatBuiltInHelperMethodsCanBeUsed.mustache\n\n@@ -21,9 +21,9 @@ Commits:\n   \"{{.}}\" is a release tag\n  {{/ifReleaseTag}}\n  \n- {{#ifContainingType commits type=\"fix\"}}\n+ {{#ifContainsType commits type=\"fix\"}}\n   commits contains fix\n- {{/ifContainingType}}\n+ {{/ifContainsType}}\n  \n  \n {{/tags}}\n\n\n###\n\n", "completion": "fix: naming"}
{"prompt": " file path A: build.gradle | file path B: build.gradle\n\n@@ -27,4 +27,5 @@ dependencies {\n  testCompile 'org.assertj:assertj-core:2.3.0'\n  testCompile 'org.mockito:mockito-all:1.8.5'\n  testCompile 'com.approvaltests:approvaltests:9.5.0'\n+ testCompile 'org.mockito:mockito-core:3.10.0'\n }\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -12,6 +12,7 @@ import static se.bjurr.gitchangelog.internal.settings.Settings.fromFile;\n \n import com.github.jknack.handlebars.Context;\n import com.github.jknack.handlebars.Handlebars;\n+import com.github.jknack.handlebars.Helper;\n import com.github.jknack.handlebars.Template;\n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Optional;\n@@ -30,10 +31,12 @@ import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.stream.Collectors;\n import org.eclipse.jgit.lib.ObjectId;\n import se.bjurr.gitchangelog.api.exceptions.GitChangelogRepositoryException;\n+import se.bjurr.gitchangelog.api.helpers.Helpers;\n import se.bjurr.gitchangelog.api.model.Changelog;\n import se.bjurr.gitchangelog.api.model.Issue;\n import se.bjurr.gitchangelog.internal.git.GitRepo;\n@@ -63,6 +66,15 @@ public class GitChangelogApi {\n     this.settings = new Settings();\n     this.handlebars = new Handlebars();\n     this.handlebars.setPrettyPrint(true);\n+    for (final Entry<String, Helper<?>> helper : Helpers.COMMIT_HELPERS.entrySet()) {\n+      this.handlebars.registerHelper(helper.getKey(), helper.getValue());\n+    }\n+    for (final Entry<String, Helper<?>> helper : Helpers.COMMITS_HELPERS.entrySet()) {\n+      this.handlebars.registerHelper(helper.getKey(), helper.getValue());\n+    }\n+    for (final Entry<String, Helper<?>> helper : Helpers.TAG_HELPERS.entrySet()) {\n+      this.handlebars.registerHelper(helper.getKey(), helper.getValue());\n+    }\n   }\n \n   private GitChangelogApi(final Settings settings) {\n@@ -233,9 +245,8 @@ public class GitChangelogApi {\n   }\n \n   /**\n-   * Registers Handlebars helper to use in template.\n+   * Registers (Javscript) Handlebars helper to use in template.\n    *\n-   * @return\n    * @see https://github.com/jknack/handlebars.java/tree/master#with-plain-javascript\n    */\n   public GitChangelogApi withHandlebarsHelper(final String javascriptHelper)\n@@ -245,6 +256,18 @@ public class GitChangelogApi {\n     return this;\n   }\n \n+  /**\n+   * Registers (Java) Handlebars helper to use in template.\n+   *\n+   * @return\n+   * @see https://github.com/jknack/handlebars.java/tree/master#with-plain-javascript\n+   */\n+  public GitChangelogApi withHandlebarsHelper(final String name, final Helper<?> helper)\n+      throws GitChangelogRepositoryException, IOException {\n+    this.handlebars.registerHelper(name, helper);\n+    return this;\n+  }\n+\n   /**\n    * Custom issues are added to support any kind of issue management, perhaps something that is\n    * internal to your project. See {@link SettingsIssue}.\n\n---\n file path A: None | file path B: src/main/java/se/bjurr/gitchangelog/api/helpers/Helpers.java\n\n@@ -0,0 +1,130 @@\n+package se.bjurr.gitchangelog.api.helpers;\n+\n+import com.github.jknack.handlebars.Helper;\n+import com.github.jknack.handlebars.Options;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import se.bjurr.gitchangelog.api.model.Commit;\n+import se.bjurr.gitchangelog.api.model.Tag;\n+\n+public class Helpers {\n+  private static final Pattern CONVENTIONAL_PATTERN =\n+      Pattern.compile(\"^(\\\\w+)(\\\\(([\\\\w:]+)\\\\)?)?:(.+)\");\n+\n+  public static final Map<String, Helper<?>> COMMIT_HELPERS = new TreeMap<String, Helper<?>>();\n+  public static final Map<String, Helper<?>> COMMITS_HELPERS = new TreeMap<String, Helper<?>>();\n+  public static final Map<String, Helper<?>> TAG_HELPERS = new TreeMap<String, Helper<?>>();\n+\n+  public static String getCommitType(final String commitMessage) {\n+    final Matcher matcher = Helpers.CONVENTIONAL_PATTERN.matcher(commitMessage.toString());\n+    if (!matcher.find()) {\n+      return \"\";\n+    }\n+    final String group = matcher.group(1);\n+    return group == null ? \"\" : group.trim();\n+  }\n+\n+  static {\n+    TAG_HELPERS.put(\n+        \"isReleaseTag\",\n+        (final Tag tag, final Options options) -> {\n+          return Pattern.matches(\n+              \"^[0-9]+\\\\.[0-9]+\\\\.[0-9]+\", tag.getName().replaceAll(\"^[0-9\\\\.]\", \"\"));\n+        });\n+\n+    COMMITS_HELPERS.put(\n+        \"containsType\",\n+        (final List<Commit> commits, final Options options) -> {\n+          final String type = options.hash(\"type\").toString();\n+          for (final Commit commit : commits) {\n+            if (Helpers.getCommitType(commit.getMessage()).equals(type)) {\n+              return true;\n+            }\n+          }\n+          return false;\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"commitType\",\n+        (final String commitMessage, final Options options) -> {\n+          return Helpers.getCommitType(commitMessage);\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"commitScopes\",\n+        (commitMessage, options) -> {\n+          final Matcher matcher = Helpers.CONVENTIONAL_PATTERN.matcher(commitMessage.toString());\n+          if (!matcher.find()) {\n+            return new ArrayList<String>();\n+          }\n+          final String group = matcher.group(3);\n+          if (group == null) {\n+            return new ArrayList<String>();\n+          }\n+          return Arrays.stream(group.split(\":\"))\n+              .map((it) -> it.trim())\n+              .collect(Collectors.toList());\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"commitDescription\",\n+        (commitMessage, options) -> {\n+          final Matcher matcher = Helpers.CONVENTIONAL_PATTERN.matcher(commitMessage.toString());\n+          if (!matcher.find()) {\n+            return \"\";\n+          }\n+          final String group = matcher.group(4);\n+          String value = group == null ? \"\" : group;\n+          if (value.indexOf(\"(refs \") != -1) {\n+            value = value.substring(0, value.indexOf(\"(refs \"));\n+          }\n+          if (value.indexOf(\"(fixes \") != -1) {\n+            value = value.substring(0, value.indexOf(\"(fixes \"));\n+          }\n+          return value.trim();\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"commitRefs\",\n+        (commitMessage, options) -> {\n+          final Matcher matcher =\n+              Pattern.compile(\"\\\\(refs ([^)]+)\").matcher(commitMessage.toString());\n+          if (!matcher.find()) {\n+            return new ArrayList<String>();\n+          }\n+          final String group = matcher.group(1);\n+          final String value = group == null ? \"\" : group;\n+          return Arrays.stream(value.split(\" \"))\n+              .map((it) -> it.trim())\n+              .collect(Collectors.toList());\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"commitFixes\",\n+        (commitMessage, options) -> {\n+          final Matcher matcher =\n+              Pattern.compile(\"\\\\(fixes ([^)]+)\").matcher(commitMessage.toString());\n+          if (!matcher.find()) {\n+            return new ArrayList<String>();\n+          }\n+          final String group = matcher.group(1);\n+          final String value = group == null ? \"\" : group;\n+          return Arrays.stream(value.split(\" \"))\n+              .map((it) -> it.trim())\n+              .collect(Collectors.toList());\n+        });\n+\n+    COMMIT_HELPERS.put(\n+        \"isType\",\n+        (commitMessage, options) -> {\n+          final String type = options.hash(\"type\").toString();\n+          return commitMessage.toString().startsWith(type);\n+        });\n+  }\n+}\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/model/Commit.java | file path B: src/main/java/se/bjurr/gitchangelog/api/model/Commit.java\n\n@@ -12,17 +12,17 @@ import java.util.List;\n public class Commit implements Serializable {\n   private static final long serialVersionUID = 6622555148468372816L;\n \n-  private static List<String> notFirst(List<String> stringList) {\n+  private static List<String> notFirst(final List<String> stringList) {\n     return stringList.subList(1, stringList.size());\n   }\n \n-  private static String toHash(String input) {\n+  private static String toHash(final String input) {\n     return input.substring(0, 15);\n   }\n \n-  private static List<String> toNoEmptyStringsList(String message) {\n-    List<String> toReturn = newArrayList();\n-    for (String part : Splitter.on(\"\\n\").split(message)) {\n+  private static List<String> toNoEmptyStringsList(final String message) {\n+    final List<String> toReturn = newArrayList();\n+    for (final String part : Splitter.on(\"\\n\").split(message)) {\n       if (!part.isEmpty()) {\n         toReturn.add(part);\n       }\n@@ -31,10 +31,10 @@ public class Commit implements Serializable {\n   }\n \n   @VisibleForTesting\n-  static String toMessageBody(String message) {\n-    List<String> stringList = toNoEmptyStringsList(message);\n+  static String toMessageBody(final String message) {\n+    final List<String> stringList = toNoEmptyStringsList(message);\n     if (stringList.size() > 1) {\n-      List<String> notFirst = notFirst(stringList);\n+      final List<String> notFirst = notFirst(stringList);\n       return on(\"\\n\") //\n           .join(notFirst);\n     }\n@@ -42,12 +42,12 @@ public class Commit implements Serializable {\n   }\n \n   @VisibleForTesting\n-  static List<String> toMessageItems(String message) {\n-    List<String> toReturn = newArrayList();\n-    List<String> stringList = toNoEmptyStringsList(message);\n+  static List<String> toMessageItems(final String message) {\n+    final List<String> toReturn = newArrayList();\n+    final List<String> stringList = toNoEmptyStringsList(message);\n     if (stringList.size() > 1) {\n-      List<String> notFirst = notFirst(stringList);\n-      for (String part : notFirst) {\n+      final List<String> notFirst = notFirst(stringList);\n+      for (final String part : notFirst) {\n         String candidate = part.trim();\n         if (candidate.startsWith(\"*\")) {\n           candidate = candidate.substring(1).trim();\n@@ -61,8 +61,8 @@ public class Commit implements Serializable {\n   }\n \n   @VisibleForTesting\n-  static String toMessageTitle(String message) {\n-    List<String> stringList = toNoEmptyStringsList(message);\n+  static String toMessageTitle(final String message) {\n+    final List<String> stringList = toNoEmptyStringsList(message);\n     if (stringList.size() > 0) {\n       return stringList.get(0).trim();\n     }\n@@ -79,13 +79,13 @@ public class Commit implements Serializable {\n   private final String message;\n \n   public Commit(\n-      String authorName,\n-      String authorEmailAddress,\n-      String commitTime,\n-      Long commitTimeLong,\n-      String message,\n-      String hash,\n-      Boolean merge) {\n+      final String authorName,\n+      final String authorEmailAddress,\n+      final String commitTime,\n+      final Long commitTimeLong,\n+      final String message,\n+      final String hash,\n+      final Boolean merge) {\n     this.authorName = checkNotNull(authorName, \"authorName\");\n     this.authorEmailAddress = checkNotNull(authorEmailAddress, \"authorEmailAddress\");\n     this.message = checkNotNull(message, \"message\").trim();\n\n---\n file path A: None | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/CommitHelperTest.java\n\n@@ -0,0 +1,49 @@\n+package se.bjurr.gitchangelog.api.helpers;\n+\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import com.github.jknack.handlebars.Helper;\n+import com.github.jknack.handlebars.Options;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import org.approvaltests.Approvals;\n+import org.junit.Test;\n+import se.bjurr.gitchangelog.test.AutoApproveReporter;\n+\n+public class CommitHelperTest {\n+\n+  private final List<String> commits =\n+      Arrays.asList( //\n+          \"feat: subject\", //\n+          \"chore(dependencies): subject\", //\n+          \"chore(dependencies:formatting): subject\", //\n+          \"chore: subject (refs ABC-123)\", //\n+          \"chore: subject (refs ABC-123 DEF-456)\", //\n+          \"chore: subject (fixes ABC-123\" //\n+          );\n+\n+  @Test\n+  public void testCommit() throws IOException {\n+\n+    final StringBuilder sb = new StringBuilder();\n+\n+    for (final String commit : this.commits) {\n+      sb.append(\"----------------------------\\n\");\n+      sb.append(commit + \"\\n\\n\");\n+      for (final Entry<String, Helper<?>> helper : Helpers.COMMIT_HELPERS.entrySet()) {\n+        final Options options = mock(Options.class);\n+        when(options.hash(\"type\")).thenReturn(\"feat\");\n+        final Helper<String> value = (Helper<String>) helper.getValue();\n+        final String actual = value.apply(commit, options).toString();\n+        sb.append(helper.getKey() + \": \" + actual + \"\\n\\n\");\n+      }\n+    }\n+\n+    Approvals.verify(\n+        sb.toString(),\n+        new org.approvaltests.core.Options().withReporter(new AutoApproveReporter()));\n+  }\n+}\n\n---\n file path A: None | file path B: src/test/java/se/bjurr/gitchangelog/api/helpers/CommitHelperTest.testCommit.approved.txt\n\n@@ -0,0 +1,90 @@\n+----------------------------\n+feat: subject\n+\n+commitDescription: subject\n+\n+commitFixes: []\n+\n+commitRefs: []\n+\n+commitScopes: []\n+\n+commitType: feat\n+\n+isType: true\n+\n+----------------------------\n+chore(dependencies): subject\n+\n+commitDescription: subject\n+\n+commitFixes: []\n+\n+commitRefs: []\n+\n+commitScopes: [dependencies]\n+\n+commitType: chore\n+\n+isType: false\n+\n+----------------------------\n+chore(dependencies:formatting): subject\n+\n+commitDescription: subject\n+\n+commitFixes: []\n+\n+commitRefs: []\n+\n+commitScopes: [dependencies, formatting]\n+\n+commitType: chore\n+\n+isType: false\n+\n+----------------------------\n+chore: subject (refs ABC-123)\n+\n+commitDescription: subject\n+\n+commitFixes: []\n+\n+commitRefs: [ABC-123]\n+\n+commitScopes: []\n+\n+commitType: chore\n+\n+isType: false\n+\n+----------------------------\n+chore: subject (refs ABC-123 DEF-456)\n+\n+commitDescription: subject\n+\n+commitFixes: []\n+\n+commitRefs: [ABC-123, DEF-456]\n+\n+commitScopes: []\n+\n+commitType: chore\n+\n+isType: false\n+\n+----------------------------\n+chore: subject (fixes ABC-123\n+\n+commitDescription: subject\n+\n+commitFixes: [ABC-123]\n+\n+commitRefs: []\n+\n+commitScopes: []\n+\n+commitType: chore\n+\n+isType: false\n+\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/test/AutoApproveReporter.java | file path B: src/test/java/se/bjurr/gitchangelog/test/AutoApproveReporter.java\n\n@@ -8,14 +8,14 @@ import org.approvaltests.core.ApprovalFailureReporter;\n  * Will be available in next Approvals version:\n  * https://github.com/approvals/ApprovalTests.Java/commit/f2ba2b91a24854c9ef3d757bd20bf2d7e0409e13\n  */\n-class AutoApproveReporter implements ApprovalFailureReporter {\n+public class AutoApproveReporter implements ApprovalFailureReporter {\n   @Override\n-  public void report(String received, String approved) {\n-    File a = new File(approved);\n+  public void report(final String received, final String approved) {\n+    final File a = new File(approved);\n     if (a.exists()) {\n       a.delete();\n     }\n-    File r = new File(received);\n+    final File r = new File(received);\n     FileUtils.copyFile(r, a);\n   }\n }\n\n\n###\n\n", "completion": "feat: adding some helpers to better support conventional commits (refs #92)"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -43,10 +43,10 @@ import se.bjurr.gitchangelog.internal.git.model.GitTag;\n import se.bjurr.gitchangelog.internal.issues.IssueParser;\n import se.bjurr.gitchangelog.internal.model.ParsedIssue;\n import se.bjurr.gitchangelog.internal.model.Transformer;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersion;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n import se.bjurr.gitchangelog.internal.settings.Settings;\n import se.bjurr.gitchangelog.internal.settings.SettingsIssue;\n-import se.bjurr.gitchangelog.semantic.SemanticVersion;\n-import se.bjurr.gitchangelog.semantic.SemanticVersioning;\n \n public class GitChangelogApi {\n \n@@ -203,12 +203,7 @@ public class GitChangelogApi {\n   public SemanticVersion getHighestSemanticVersion() throws GitChangelogRepositoryException {\n     final Changelog changelog = this.getChangelog(false);\n     final List<String> tags = this.getTagsAsStrings(changelog);\n-    final List<String> commits = this.getCommitMessages(changelog);\n-    final String majorVersionPattern = this.settings.getSemanticMajorPattern().orNull();\n-    final String minorVersionPattern = this.settings.getSemanticMinorPattern().orNull();\n-    final SemanticVersioning semanticVersioning =\n-        new SemanticVersioning(tags, commits, majorVersionPattern, minorVersionPattern);\n-    return semanticVersioning.getHighestVersion();\n+    return SemanticVersioning.getHighestVersion(tags);\n   }\n \n   private List<String> getCommitMessages(final Changelog changelog) {\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/semantic/SemanticVersion.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersion.java\n\n@@ -1,4 +1,4 @@\n-package se.bjurr.gitchangelog.semantic;\n+package se.bjurr.gitchangelog.internal.semantic;\n \n import java.util.Optional;\n \n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/semantic/SemanticVersioning.java | file path B: src/main/java/se/bjurr/gitchangelog/internal/semantic/SemanticVersioning.java\n\n@@ -1,4 +1,4 @@\n-package se.bjurr.gitchangelog.semantic;\n+package se.bjurr.gitchangelog.internal.semantic;\n \n import java.util.List;\n import java.util.regex.Matcher;\n@@ -12,10 +12,10 @@ public class SemanticVersioning {\n     PATCH\n   }\n \n-  private final List<String> tags;\n   private final List<String> commits;\n   private final Pattern majorPattern;\n   private final Pattern minorPattern;\n+  private final List<String> tags;\n \n   public SemanticVersioning(\n       final List<String> tags,\n@@ -28,15 +28,8 @@ public class SemanticVersioning {\n     this.minorPattern = Pattern.compile(this.notNull(minorPattern, \"minorPattern\"));\n   }\n \n-  private String notNull(final String value, final String msg) {\n-    if (value == null) {\n-      throw new RuntimeException(msg + \" is not defined\");\n-    }\n-    return value;\n-  }\n-\n   public SemanticVersion getNextVersion() {\n-    final SemanticVersion highestVersion = this.getHighestVersion();\n+    final SemanticVersion highestVersion = SemanticVersioning.getHighestVersion(this.tags);\n     final VERSION_STEP versionStep = this.getVersionStep();\n     if (versionStep == VERSION_STEP.MAJOR) {\n       return new SemanticVersion(highestVersion.getMajor() + 1, 0, 0);\n@@ -47,9 +40,9 @@ public class SemanticVersioning {\n         highestVersion.getMajor(), highestVersion.getMinor(), highestVersion.getPatch() + 1);\n   }\n \n-  public SemanticVersion getHighestVersion() {\n+  public static SemanticVersion getHighestVersion(final List<String> tags) {\n     SemanticVersion highest = new SemanticVersion(0, 0, 0);\n-    for (final String tag : this.tags) {\n+    for (final String tag : tags) {\n       final Matcher semanticVersionMatcher =\n           Pattern.compile(\"[0-9]+\\\\.[0-9]+\\\\.[0-9]+\").matcher(tag.replaceAll(\"[^0-9\\\\.]\", \"\"));\n       if (semanticVersionMatcher.find()) {\n@@ -91,4 +84,11 @@ public class SemanticVersioning {\n     }\n     return versionStep;\n   }\n+\n+  private String notNull(final String value, final String msg) {\n+    if (value == null) {\n+      throw new RuntimeException(msg + \" is not defined\");\n+    }\n+    return value;\n+  }\n }\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -8,6 +8,7 @@ import java.util.List;\n import org.junit.Before;\n import org.junit.Test;\n import se.bjurr.gitchangelog.api.GitChangelogApi;\n+import se.bjurr.gitchangelog.internal.semantic.SemanticVersioning;\n \n public class SemanticVersioningTest {\n \n@@ -44,7 +45,10 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"breaking: whatever\");\n \n-    assertThat(this.sut.getHighestVersion() + \" -> \" + this.sut.getNextVersion()) //\n+    assertThat(\n+            SemanticVersioning.getHighestVersion(this.tags)\n+                + \" -> \"\n+                + this.sut.getNextVersion()) //\n         .isEqualTo(\"1.0.0 -> 2.0.0\");\n   }\n \n@@ -53,7 +57,10 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"update: whatever\");\n \n-    assertThat(this.sut.getHighestVersion() + \" -> \" + this.sut.getNextVersion()) //\n+    assertThat(\n+            SemanticVersioning.getHighestVersion(this.tags)\n+                + \" -> \"\n+                + this.sut.getNextVersion()) //\n         .isEqualTo(\"1.0.0 -> 1.1.0\");\n   }\n \n@@ -62,7 +69,10 @@ public class SemanticVersioningTest {\n     this.tags.add(\"v1.0.0\");\n     this.commits.add(\"chore: whatever\");\n \n-    assertThat(this.sut.getHighestVersion() + \" -> \" + this.sut.getNextVersion()) //\n+    assertThat(\n+            SemanticVersioning.getHighestVersion(this.tags)\n+                + \" -> \"\n+                + this.sut.getNextVersion()) //\n         .isEqualTo(\"1.0.0 -> 1.0.1\");\n   }\n }\n\n\n###\n\n", "completion": "fix: dont require semantic patterns to get highest tag"}
{"prompt": " file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -190,7 +190,7 @@ public class GitChangelogApi {\n    * been configured.\n    */\n   public SemanticVersion getNextSemanticVersion() throws GitChangelogRepositoryException {\n-    final Changelog changelog = this.getChangelog();\n+    final Changelog changelog = this.getChangelog(false);\n     final List<String> tags = this.getTagsAsStrings(changelog);\n     final List<String> commits = this.getCommitMessages(changelog);\n     final String majorVersionPattern = this.settings.getSemanticMajorPattern().orNull();\n@@ -201,7 +201,7 @@ public class GitChangelogApi {\n   }\n \n   public SemanticVersion getHighestSemanticVersion() throws GitChangelogRepositoryException {\n-    final Changelog changelog = this.getChangelog();\n+    final Changelog changelog = this.getChangelog(false);\n     final List<String> tags = this.getTagsAsStrings(changelog);\n     final List<String> commits = this.getCommitMessages(changelog);\n     final String majorVersionPattern = this.settings.getSemanticMajorPattern().orNull();\n\n\n###\n\n", "completion": "fix: dont use integrations when determining versions"}
{"prompt": " file path A: build.sh | file path B: None\n\n@@ -1,3 +0,0 @@\n-#!/bin/bash\n-cp src/main/resources/git-changelog-template.mustache changelog.mustache\n-./gradlew build\n\n---\n file path A: changelog.mustache | file path B: None\n\n@@ -1,32 +0,0 @@\n-# Changelog\n-\n-Changelog for {{ownerName}} {{repoName}}.\n-\n-{{#tags}}\n-## {{name}}\n- {{#issues}}\n-  {{#hasIssue}}\n-   {{#hasLink}}\n-### {{name}} [{{issue}}]({{link}}) {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n-   {{/hasLink}}\n-   {{^hasLink}}\n-### {{name}} {{issue}} {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n-   {{/hasLink}}\n-  {{/hasIssue}}\n-  {{^hasIssue}}\n-### {{name}}\n-  {{/hasIssue}}\n-\n-  {{#commits}}\n-**{{{messageTitle}}}**\n-\n-{{#messageBodyItems}}\n- * {{.}} \n-{{/messageBodyItems}}\n-\n-[{{hash}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}} *{{commitTime}}*\n-\n-  {{/commits}}\n-\n- {{/issues}}\n-{{/tags}}\n\n---\n file path A: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java | file path B: src/main/java/se/bjurr/gitchangelog/api/GitChangelogApi.java\n\n@@ -223,14 +223,16 @@ public class GitChangelogApi {\n     return changelog.getTags().stream().map((it) -> it.getName()).collect(Collectors.toList());\n   }\n \n-  /**\n-   * Will be used to determine next semantic version.\n-   *\n-   * @return\n-   */\n-  public GitChangelogApi withSemanticPatterns(final String major, final String minor)\n-      throws GitChangelogRepositoryException, IOException {\n+  /** Will be used to determine next semantic version. */\n+  public GitChangelogApi withSemanticMajorVersionPattern(final String major)\n+      throws GitChangelogRepositoryException {\n     this.settings.setSemanticMajorPattern(major);\n+    return this;\n+  }\n+\n+  /** Will be used to determine next semantic version. */\n+  public GitChangelogApi withSemanticMinorVersionPattern(final String minor)\n+      throws GitChangelogRepositoryException {\n     this.settings.setSemanticMinorPattern(minor);\n     return this;\n   }\n\n---\n file path A: src/main/resources/git-changelog-template.mustache | file path B: None\n\n@@ -1,32 +0,0 @@\n-# Changelog\n-\n-Changelog for {{ownerName}} {{repoName}}.\n-\n-{{#tags}}\n-## {{name}}\n- {{#issues}}\n-  {{#hasIssue}}\n-   {{#hasLink}}\n-### {{name}} [{{issue}}]({{link}}) {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n-   {{/hasLink}}\n-   {{^hasLink}}\n-### {{name}} {{issue}} {{title}} {{#hasIssueType}} *{{issueType}}* {{/hasIssueType}} {{#hasLabels}} {{#labels}} *{{.}}* {{/labels}} {{/hasLabels}}\n-   {{/hasLink}}\n-  {{/hasIssue}}\n-  {{^hasIssue}}\n-### {{name}}\n-  {{/hasIssue}}\n-\n-  {{#commits}}\n-**{{{messageTitle}}}**\n-\n-{{#messageBodyItems}}\n- * {{.}} \n-{{/messageBodyItems}}\n-\n-[{{hash}}](https://github.com/{{ownerName}}/{{repoName}}/commit/{{hash}}) {{authorName}} *{{commitTime}}*\n-\n-  {{/commits}}\n-\n- {{/issues}}\n-{{/tags}}\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/api/CreateGitChangelogOfThisRepoTest.java | file path B: None\n\n@@ -1,47 +0,0 @@\n-package se.bjurr.gitchangelog.api;\n-\n-import static com.google.common.base.Strings.padEnd;\n-import static com.google.common.io.Resources.getResource;\n-import static se.bjurr.gitchangelog.api.GitChangelogApi.gitChangelogApiBuilder;\n-\n-import java.io.File;\n-import java.util.logging.Logger;\n-import org.junit.Before;\n-import org.junit.Test;\n-\n-/** This test creates the actual changelog of this library. */\n-public class CreateGitChangelogOfThisRepoTest {\n-  private static Logger LOG =\n-      Logger.getLogger(CreateGitChangelogOfThisRepoTest.class.getSimpleName());\n-\n-  private String repoRoot;\n-\n-  @Before\n-  public void before() throws Exception {\n-    repoRoot = getRepoRoot(new File(getResource(\"github-issues.json\").toURI()));\n-  }\n-\n-  @Test\n-  public void createFullChangelog() throws Exception {\n-    String toFile = repoRoot + \"/CHANGELOG.md\";\n-    String gitHubToken = System.getenv(\"GITHUB_OAUTH2TOKEN\");\n-    if (gitHubToken == null) {\n-      LOG.info(\"Not using token\");\n-    } else {\n-      LOG.info(\"Using token: \" + padEnd(\"\", gitHubToken.length(), '*'));\n-    }\n-    gitChangelogApiBuilder() //\n-        .withSettings(new File(repoRoot + \"/changelog.json\").toURI().toURL()) //\n-        .withGitHubToken(gitHubToken) //\n-        .withJiraServer(null) //\n-        .toFile(new File(toFile));\n-    LOG.info(\"Wrote \" + toFile);\n-  }\n-\n-  private String getRepoRoot(File file) {\n-    if (file.getParentFile().getPath().endsWith(\"git-changelog-lib\")) {\n-      return file.getParentFile().getPath();\n-    }\n-    return getRepoRoot(file.getParentFile());\n-  }\n-}\n\n---\n file path A: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java | file path B: src/test/java/se/bjurr/gitchangelog/semantic/SemanticVersioningTest.java\n\n@@ -32,7 +32,8 @@ public class SemanticVersioningTest {\n     final GitChangelogApi builder =\n         gitChangelogApiBuilder() //\n             .withToCommit(\"7c1c366\") //\n-            .withSemanticPatterns(\"breaking:.*\", \"update:.*\");\n+            .withSemanticMajorVersionPattern(\"breaking:.*\") //\n+            .withSemanticMinorVersionPattern(\"update:.*\");\n \n     assertThat(builder.getNextSemanticVersion().toString()).isEqualTo(\"1.144.5\");\n     assertThat(builder.getHighestSemanticVersion().toString()).isEqualTo(\"1.144.4\");\n\n\n###\n\n", "completion": "feat: renaming methods in api"}
